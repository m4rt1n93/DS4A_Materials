{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\six.py:31: DeprecationWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
      "  \"(https://pypi.org/project/six/).\", DeprecationWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\__init__.py:15: DeprecationWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
      "  warnings.warn(msg, category=DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from pandas_datareader import data\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import requests\n",
    "from math import sqrt\n",
    "import numpy as np\n",
    "from bs4 import BeautifulSoup\n",
    "from dateutil.relativedelta import *\n",
    "from statsmodels.tsa.stattools import adfuller, grangercausalitytests\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "from statsmodels.tools.eval_measures import rmse, aic\n",
    "from statsmodels.graphics import tsaplots\n",
    "from statsmodels.tsa.vector_ar.vecm import coint_johansen\n",
    "from statsmodels.tsa.vector_ar import vecm\n",
    "from statsmodels.tsa.vector_ar.vecm import VECM\n",
    "from pmdarima.arima import auto_arima\n",
    "from statsmodels.tsa.holtwinters import ExponentialSmoothing as HWES\n",
    "from statsmodels.tsa.api import VAR\n",
    "import statsmodels.tsa.api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_test(df,size):\n",
    "    ndata = len(df)-size\n",
    "    train = df[0:ndata]\n",
    "    test = df[ndata:] \n",
    "    return train, test\n",
    "\n",
    "def augmented_dickey_fuller_statistics(time_series):\n",
    "    result = adfuller(time_series.values)\n",
    "    print('ADF Statistic: %f' % result[0])\n",
    "    print('p-value: %f' % result[1])\n",
    "    print('Critical Values:')\n",
    "    for key, value in result[4].items():\n",
    "        print('\\t%s: %.3f' % (key, value))\n",
    "    return result[1]\n",
    "    \n",
    "def series_prediction (df, n_obs,method='VEC',how='train'):\n",
    "    X_train, X_test = train_test(df,n_obs)\n",
    "    \n",
    "    if method =='VEC':\n",
    "        p_values=[]\n",
    "        for i in df.columns:\n",
    "            print(f'Augmented Dickey-Fuller Test: {i} Time Series')\n",
    "            x=augmented_dickey_fuller_statistics(df[i])\n",
    "            print()\n",
    "            y = 0 if x<0.05 else 1\n",
    "            p_values.append(y)\n",
    "\n",
    "        X_train_log = np.log(X_train)\n",
    "\n",
    "        X_train_log_diff =(X_train_log).diff().dropna() if sum(p_values)>0 else X_train_log\n",
    "\n",
    "        model = VAR(endog=X_train_log_diff)\n",
    "        res = model.select_order(15)\n",
    "\n",
    "        best_model={}\n",
    "        criteria=['aic', 'bic', 'hqic', 'fpe']\n",
    "        for i in criteria:\n",
    "            model_fit = model.fit(maxlags=res.selected_orders[i])\n",
    "            best_model[i] = model_fit.aic, model_fit.k_ar\n",
    "\n",
    "        y=pd.DataFrame(best_model).T\n",
    "        best_choice= int(y[y[0]==y[0].min()].iloc[0,1])\n",
    "        model_fit = model.fit(maxlags=best_choice)\n",
    "\n",
    "        print(f\"Lag order for the best model: {best_choice},\\n AIC Criteria for the best model: {y[y[0]==y[0].min()].iloc[0,0]}\")\n",
    "\n",
    "        input_data = X_train_log_diff.values[-best_choice:]\n",
    "        pred = model_fit.forecast(y=input_data, steps=n_obs)\n",
    "        pred = (pd.DataFrame(pred, index=X_test.index, columns=X_test.columns + '_pred'))\n",
    "\n",
    "        def invert_transformation(X_train, pred_df):\n",
    "            forecast = pred.copy()\n",
    "            columns = X_train.columns\n",
    "            for col in columns:\n",
    "                forecast[str(col)+'_pred'] = X_train[col].iloc[-1] + forecast[str(col) +'_pred'].cumsum()\n",
    "                return forecast\n",
    "\n",
    "        output = invert_transformation(X_train, pred)\n",
    "        output_original = np.exp(output)\n",
    "\n",
    "        if how=='train':\n",
    "            vec_rank1 = vecm.select_coint_rank(X_train, det_order = 1, k_ar_diff = 1, method = 'trace', signif=0.01)\n",
    "            rank=max(vec_rank1.r_1)\n",
    "            vecm_model = VECM(endog = X_train, k_ar_diff = best_choice, coint_rank = rank, deterministic = 'ci')\n",
    "            vecm_fit = vecm_model.fit()\n",
    "\n",
    "            forecast, lower, upper = vecm_fit.predict(n_obs, 0.05)\n",
    "            forecastvec=pd.DataFrame(data=forecast)\n",
    "            forecastvec.columns=df.columns\n",
    "            forecastvec.reset_index()\n",
    "            ecm = (mean_squared_error(X_test.iloc[:,0], forecastvec.iloc[:,0]))**0.5\n",
    "            return ecm\n",
    "        else:\n",
    "            vec_rank1 = vecm.select_coint_rank(df, det_order = 1, k_ar_diff = 1, method = 'trace', signif=0.01)\n",
    "            rank=max(vec_rank1.r_1)\n",
    "            vecm_model = VECM(endog = df, k_ar_diff = best_choice, coint_rank = rank, deterministic = 'ci')\n",
    "            vecm_fit = vecm_model.fit()\n",
    "\n",
    "            forecast, lower, upper = vecm_fit.predict(n_obs, 0.05)\n",
    "            forecastvec=pd.DataFrame(data=forecast)\n",
    "            forecastvec.columns=df.columns\n",
    "            forecastvec.reset_index()\n",
    "            vecm_fit.plot_forecast(steps=n_obs, n_last_obs=n_obs*2)        \n",
    "            return forecastvec[-n_obs:]\n",
    "    \n",
    "    elif method == 'HWES':\n",
    "        if how=='train':\n",
    "            model = HWES(X_train, seasonal_periods=12, trend='add', seasonal='mul')\n",
    "            fitted = model.fit()\n",
    "            sales_forecast = fitted.forecast(steps=n_obs)\n",
    "            sales_forecast = pd.DataFrame(sales_forecast,columns=[str(df.name)]).reset_index(drop=True)\n",
    "            ecm = (mean_squared_error(X_test, sales_forecast))**0.5\n",
    "            return ecm\n",
    "\n",
    "        else:\n",
    "            model = HWES(df, seasonal_periods=12, trend='add', seasonal='mul')\n",
    "            fitted = model.fit()\n",
    "            sales_forecast = fitted.forecast(steps=n_obs)\n",
    "            sales_forecast = pd.DataFrame(sales_forecast,columns=[str(df.name)]).reset_index(drop=True)\n",
    "            return sales_forecast\n",
    "        \n",
    "    else:\n",
    "        if how=='train':\n",
    "            stepwise_model = auto_arima(X_train, start_p=1, start_q=1, max_p=3, max_q=3, m=6,\n",
    "                               start_P=0, seasonal=True, d=1, D=1, \n",
    "                                trace=True,error_action='ignore',suppress_warnings=True, stepwise=True)\n",
    "\n",
    "            try:\n",
    "                stepwise_model.fit(X_test)\n",
    "                future_forecast = stepwise_model.predict(n_periods=n_obs)\n",
    "                future_forecast = pd.DataFrame(future_forecast,columns=[str(df.name)])\n",
    "                ecm = (mean_squared_error(X_test, future_forecast))**0.5\n",
    "            except:\n",
    "                future_forecast=0\n",
    "                ecm=1000000000\n",
    "            return ecm\n",
    "        else:\n",
    "            stepwise_model = auto_arima(df, start_p=1, start_q=1, max_p=3, max_q=3, m=6,\n",
    "                               start_P=0, seasonal=True, d=1, D=1, \n",
    "                                trace=True,error_action='ignore',suppress_warnings=True, stepwise=True)\n",
    "            future_forecast = stepwise_model.predict(n_periods=n_obs)\n",
    "            future_forecast = pd.DataFrame(future_forecast,columns=[str(df.name)])\n",
    "            return future_forecast[-n_obs:]        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ</th>\n",
       "      <th>ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL</th>\n",
       "      <th>ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L</th>\n",
       "      <th>...</th>\n",
       "      <th>CONFITERIA_otros</th>\n",
       "      <th>DETERGENTE_PARA_ROPA_otros</th>\n",
       "      <th>MASCOTAS_otros</th>\n",
       "      <th>MEDICAMENTOS_otros</th>\n",
       "      <th>MUNDO_BEBES_otros</th>\n",
       "      <th>MUNDO_BEBE_otros</th>\n",
       "      <th>OTRAS_CATEGORIAS_otros</th>\n",
       "      <th>Otros</th>\n",
       "      <th>SALUD_Y_BIENESTAR_otros</th>\n",
       "      <th>_BEBIDAS_otros</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>271400.0</td>\n",
       "      <td>7086200.0</td>\n",
       "      <td>5274250.0</td>\n",
       "      <td>3182800.0</td>\n",
       "      <td>4172900.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2334100.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>497400.0</td>\n",
       "      <td>9312000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1161900.0</td>\n",
       "      <td>142100.0</td>\n",
       "      <td>906700.0</td>\n",
       "      <td>113400.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>71400.0</td>\n",
       "      <td>1601839.0</td>\n",
       "      <td>4500.0</td>\n",
       "      <td>21600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>507700.0</td>\n",
       "      <td>7086200.0</td>\n",
       "      <td>5319250.0</td>\n",
       "      <td>5869200.0</td>\n",
       "      <td>8757600.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>1979800.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>497400.0</td>\n",
       "      <td>9312000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1450550.0</td>\n",
       "      <td>142100.0</td>\n",
       "      <td>906700.0</td>\n",
       "      <td>113400.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>71400.0</td>\n",
       "      <td>1654452.0</td>\n",
       "      <td>198500.0</td>\n",
       "      <td>21600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>361500.0</td>\n",
       "      <td>7086200.0</td>\n",
       "      <td>6952250.0</td>\n",
       "      <td>5314400.0</td>\n",
       "      <td>6609150.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2095400.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>497400.0</td>\n",
       "      <td>9312000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>935550.0</td>\n",
       "      <td>142100.0</td>\n",
       "      <td>906700.0</td>\n",
       "      <td>113400.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>71400.0</td>\n",
       "      <td>8852506.0</td>\n",
       "      <td>13500.0</td>\n",
       "      <td>21600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>163650.0</td>\n",
       "      <td>7086200.0</td>\n",
       "      <td>3152000.0</td>\n",
       "      <td>5375300.0</td>\n",
       "      <td>2341000.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>1623400.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>497400.0</td>\n",
       "      <td>9312000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2106800.0</td>\n",
       "      <td>142100.0</td>\n",
       "      <td>906700.0</td>\n",
       "      <td>113400.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>71400.0</td>\n",
       "      <td>13139291.0</td>\n",
       "      <td>59400.0</td>\n",
       "      <td>21600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>349450.0</td>\n",
       "      <td>7086200.0</td>\n",
       "      <td>5824250.0</td>\n",
       "      <td>4542600.0</td>\n",
       "      <td>3291300.0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2893400.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>497400.0</td>\n",
       "      <td>9312000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>855050.0</td>\n",
       "      <td>142100.0</td>\n",
       "      <td>906700.0</td>\n",
       "      <td>113400.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>339000.0</td>\n",
       "      <td>71400.0</td>\n",
       "      <td>9574541.0</td>\n",
       "      <td>65700.0</td>\n",
       "      <td>21600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>82</td>\n",
       "      <td>4120200.0</td>\n",
       "      <td>33132000.0</td>\n",
       "      <td>141200.0</td>\n",
       "      <td>28136300.0</td>\n",
       "      <td>79128000.0</td>\n",
       "      <td>7932800.0</td>\n",
       "      <td>15984150.0</td>\n",
       "      <td>19861300.0</td>\n",
       "      <td>6276700.0</td>\n",
       "      <td>5747500.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1600050.0</td>\n",
       "      <td>589600.0</td>\n",
       "      <td>867450.0</td>\n",
       "      <td>355500.0</td>\n",
       "      <td>531000.0</td>\n",
       "      <td>531000.0</td>\n",
       "      <td>763950.0</td>\n",
       "      <td>50700.0</td>\n",
       "      <td>1315850.0</td>\n",
       "      <td>7200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>83</td>\n",
       "      <td>771100.0</td>\n",
       "      <td>23855100.0</td>\n",
       "      <td>176500.0</td>\n",
       "      <td>32850400.0</td>\n",
       "      <td>46154000.0</td>\n",
       "      <td>9856800.0</td>\n",
       "      <td>19694350.0</td>\n",
       "      <td>13631500.0</td>\n",
       "      <td>7021600.0</td>\n",
       "      <td>4986300.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1429450.0</td>\n",
       "      <td>1568600.0</td>\n",
       "      <td>1273350.0</td>\n",
       "      <td>441600.0</td>\n",
       "      <td>220500.0</td>\n",
       "      <td>220500.0</td>\n",
       "      <td>431650.0</td>\n",
       "      <td>50700.0</td>\n",
       "      <td>1325100.0</td>\n",
       "      <td>7200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>84</td>\n",
       "      <td>3249000.0</td>\n",
       "      <td>22404100.0</td>\n",
       "      <td>176500.0</td>\n",
       "      <td>39768000.0</td>\n",
       "      <td>79082200.0</td>\n",
       "      <td>8228800.0</td>\n",
       "      <td>14681950.0</td>\n",
       "      <td>12898400.0</td>\n",
       "      <td>4580950.0</td>\n",
       "      <td>5956200.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1763900.0</td>\n",
       "      <td>1449000.0</td>\n",
       "      <td>1258050.0</td>\n",
       "      <td>1201950.0</td>\n",
       "      <td>433950.0</td>\n",
       "      <td>256500.0</td>\n",
       "      <td>364100.0</td>\n",
       "      <td>50700.0</td>\n",
       "      <td>1220350.0</td>\n",
       "      <td>28800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>85</td>\n",
       "      <td>3580800.0</td>\n",
       "      <td>31806000.0</td>\n",
       "      <td>176500.0</td>\n",
       "      <td>29634000.0</td>\n",
       "      <td>62346900.0</td>\n",
       "      <td>7429600.0</td>\n",
       "      <td>22641800.0</td>\n",
       "      <td>18198300.0</td>\n",
       "      <td>7616650.0</td>\n",
       "      <td>4348000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2086100.0</td>\n",
       "      <td>1948500.0</td>\n",
       "      <td>1778700.0</td>\n",
       "      <td>710050.0</td>\n",
       "      <td>394350.0</td>\n",
       "      <td>369000.0</td>\n",
       "      <td>569600.0</td>\n",
       "      <td>50700.0</td>\n",
       "      <td>1274850.0</td>\n",
       "      <td>50400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>86</td>\n",
       "      <td>4021200.0</td>\n",
       "      <td>60644200.0</td>\n",
       "      <td>176500.0</td>\n",
       "      <td>35892400.0</td>\n",
       "      <td>80590200.0</td>\n",
       "      <td>4523400.0</td>\n",
       "      <td>26874050.0</td>\n",
       "      <td>32510900.0</td>\n",
       "      <td>9657550.0</td>\n",
       "      <td>5918700.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2305850.0</td>\n",
       "      <td>1147500.0</td>\n",
       "      <td>1634100.0</td>\n",
       "      <td>750650.0</td>\n",
       "      <td>234000.0</td>\n",
       "      <td>234000.0</td>\n",
       "      <td>573700.0</td>\n",
       "      <td>50700.0</td>\n",
       "      <td>1833600.0</td>\n",
       "      <td>36000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>87 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.  \\\n",
       "0                                            271400.0       \n",
       "1                                            507700.0       \n",
       "2                                            361500.0       \n",
       "3                                            163650.0       \n",
       "4                                            349450.0       \n",
       "..                                                ...       \n",
       "82                                          4120200.0       \n",
       "83                                           771100.0       \n",
       "84                                          3249000.0       \n",
       "85                                          3580800.0       \n",
       "86                                          4021200.0       \n",
       "\n",
       "    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.  \\\n",
       "0                                           7086200.0                 \n",
       "1                                           7086200.0                 \n",
       "2                                           7086200.0                 \n",
       "3                                           7086200.0                 \n",
       "4                                           7086200.0                 \n",
       "..                                                ...                 \n",
       "82                                         33132000.0                 \n",
       "83                                         23855100.0                 \n",
       "84                                         22404100.0                 \n",
       "85                                         31806000.0                 \n",
       "86                                         60644200.0                 \n",
       "\n",
       "    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S  \\\n",
       "0                                           5274250.0             \n",
       "1                                           5319250.0             \n",
       "2                                           6952250.0             \n",
       "3                                           3152000.0             \n",
       "4                                           5824250.0             \n",
       "..                                                ...             \n",
       "82                                           141200.0             \n",
       "83                                           176500.0             \n",
       "84                                           176500.0             \n",
       "85                                           176500.0             \n",
       "86                                           176500.0             \n",
       "\n",
       "    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A  \\\n",
       "0                                           3182800.0     \n",
       "1                                           5869200.0     \n",
       "2                                           5314400.0     \n",
       "3                                           5375300.0     \n",
       "4                                           4542600.0     \n",
       "..                                                ...     \n",
       "82                                         28136300.0     \n",
       "83                                         32850400.0     \n",
       "84                                         39768000.0     \n",
       "85                                         29634000.0     \n",
       "86                                         35892400.0     \n",
       "\n",
       "    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A  \\\n",
       "0                                           4172900.0      \n",
       "1                                           8757600.0      \n",
       "2                                           6609150.0      \n",
       "3                                           2341000.0      \n",
       "4                                           3291300.0      \n",
       "..                                                ...      \n",
       "82                                         79128000.0      \n",
       "83                                         46154000.0      \n",
       "84                                         79082200.0      \n",
       "85                                         62346900.0      \n",
       "86                                         80590200.0      \n",
       "\n",
       "    ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.  \\\n",
       "0                                             65000.0                 \n",
       "1                                             65000.0                 \n",
       "2                                             65000.0                 \n",
       "3                                             65000.0                 \n",
       "4                                             65000.0                 \n",
       "..                                                ...                 \n",
       "82                                          7932800.0                 \n",
       "83                                          9856800.0                 \n",
       "84                                          8228800.0                 \n",
       "85                                          7429600.0                 \n",
       "86                                          4523400.0                 \n",
       "\n",
       "    ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A  \\\n",
       "0                                           2334100.0     \n",
       "1                                           1979800.0     \n",
       "2                                           2095400.0     \n",
       "3                                           1623400.0     \n",
       "4                                           2893400.0     \n",
       "..                                                ...     \n",
       "82                                         15984150.0     \n",
       "83                                         19694350.0     \n",
       "84                                         14681950.0     \n",
       "85                                         22641800.0     \n",
       "86                                         26874050.0     \n",
       "\n",
       "    ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ  \\\n",
       "0                                             20000.0                 \n",
       "1                                             20000.0                 \n",
       "2                                             20000.0                 \n",
       "3                                             20000.0                 \n",
       "4                                             20000.0                 \n",
       "..                                                ...                 \n",
       "82                                         19861300.0                 \n",
       "83                                         13631500.0                 \n",
       "84                                         12898400.0                 \n",
       "85                                         18198300.0                 \n",
       "86                                         32510900.0                 \n",
       "\n",
       "    ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL  \\\n",
       "0                                      497400.0   \n",
       "1                                      497400.0   \n",
       "2                                      497400.0   \n",
       "3                                      497400.0   \n",
       "4                                      497400.0   \n",
       "..                                          ...   \n",
       "82                                    6276700.0   \n",
       "83                                    7021600.0   \n",
       "84                                    4580950.0   \n",
       "85                                    7616650.0   \n",
       "86                                    9657550.0   \n",
       "\n",
       "    ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L  ...  \\\n",
       "0                                           9312000.0               ...   \n",
       "1                                           9312000.0               ...   \n",
       "2                                           9312000.0               ...   \n",
       "3                                           9312000.0               ...   \n",
       "4                                           9312000.0               ...   \n",
       "..                                                ...               ...   \n",
       "82                                          5747500.0               ...   \n",
       "83                                          4986300.0               ...   \n",
       "84                                          5956200.0               ...   \n",
       "85                                          4348000.0               ...   \n",
       "86                                          5918700.0               ...   \n",
       "\n",
       "    CONFITERIA_otros  DETERGENTE_PARA_ROPA_otros  MASCOTAS_otros  \\\n",
       "0          1161900.0                    142100.0        906700.0   \n",
       "1          1450550.0                    142100.0        906700.0   \n",
       "2           935550.0                    142100.0        906700.0   \n",
       "3          2106800.0                    142100.0        906700.0   \n",
       "4           855050.0                    142100.0        906700.0   \n",
       "..               ...                         ...             ...   \n",
       "82         1600050.0                    589600.0        867450.0   \n",
       "83         1429450.0                   1568600.0       1273350.0   \n",
       "84         1763900.0                   1449000.0       1258050.0   \n",
       "85         2086100.0                   1948500.0       1778700.0   \n",
       "86         2305850.0                   1147500.0       1634100.0   \n",
       "\n",
       "    MEDICAMENTOS_otros  MUNDO_BEBES_otros  MUNDO_BEBE_otros  \\\n",
       "0             113400.0           339000.0          339000.0   \n",
       "1             113400.0           339000.0          339000.0   \n",
       "2             113400.0           339000.0          339000.0   \n",
       "3             113400.0           339000.0          339000.0   \n",
       "4             113400.0           339000.0          339000.0   \n",
       "..                 ...                ...               ...   \n",
       "82            355500.0           531000.0          531000.0   \n",
       "83            441600.0           220500.0          220500.0   \n",
       "84           1201950.0           433950.0          256500.0   \n",
       "85            710050.0           394350.0          369000.0   \n",
       "86            750650.0           234000.0          234000.0   \n",
       "\n",
       "    OTRAS_CATEGORIAS_otros       Otros  SALUD_Y_BIENESTAR_otros  \\\n",
       "0                  71400.0   1601839.0                   4500.0   \n",
       "1                  71400.0   1654452.0                 198500.0   \n",
       "2                  71400.0   8852506.0                  13500.0   \n",
       "3                  71400.0  13139291.0                  59400.0   \n",
       "4                  71400.0   9574541.0                  65700.0   \n",
       "..                     ...         ...                      ...   \n",
       "82                763950.0     50700.0                1315850.0   \n",
       "83                431650.0     50700.0                1325100.0   \n",
       "84                364100.0     50700.0                1220350.0   \n",
       "85                569600.0     50700.0                1274850.0   \n",
       "86                573700.0     50700.0                1833600.0   \n",
       "\n",
       "    _BEBIDAS_otros  \n",
       "0          21600.0  \n",
       "1          21600.0  \n",
       "2          21600.0  \n",
       "3          21600.0  \n",
       "4          21600.0  \n",
       "..             ...  \n",
       "82          7200.0  \n",
       "83          7200.0  \n",
       "84         28800.0  \n",
       "85         50400.0  \n",
       "86         36000.0  \n",
       "\n",
       "[87 rows x 34 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "credentials=\"postgresql://postgres:12345678@ds4ateam77.cxdzzcrtbiby.us-east-2.rds.amazonaws.com:5432/teate\"\n",
    "df = pd.read_sql(\"\"\"\n",
    "            SELECT *\n",
    "            FROM vec_input\n",
    "            \"\"\", con = credentials)\n",
    "# return your first five rows\n",
    "cols=df.columns\n",
    "cols=cols.tolist()\n",
    "cols.pop(0)\n",
    "df.head()\n",
    "df=df.iloc[:-1,:]\n",
    "data=df[cols].dropna(axis=1)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.074408</td>\n",
       "      <td>0.043291</td>\n",
       "      <td>0.155854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</td>\n",
       "      <td>-0.074408</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.278402</td>\n",
       "      <td>-0.248579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</td>\n",
       "      <td>0.043291</td>\n",
       "      <td>-0.278402</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.805732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</td>\n",
       "      <td>0.155854</td>\n",
       "      <td>-0.248579</td>\n",
       "      <td>0.805732</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.  \\\n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...                                           1.000000                 \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...                                          -0.074408                 \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...                                           0.043291                 \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...                                           0.155854                 \n",
       "\n",
       "                                                    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S  \\\n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...                                          -0.074408             \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...                                           1.000000             \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...                                          -0.278402             \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...                                          -0.248579             \n",
       "\n",
       "                                                    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A  \\\n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...                                           0.043291     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...                                          -0.278402     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...                                           1.000000     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...                                           0.805732     \n",
       "\n",
       "                                                    ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A  \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...                                           0.155854     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...                                          -0.248579     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...                                           0.805732     \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...                                           1.000000     "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor = data.corr()\n",
    "corn=cor.iloc[1:5,1:5]\n",
    "corn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAu8AAAJ/CAYAAADI5T0SAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdebwcVZ338c83CBIEBZR9SVgCKHvkEUdA2VScQUgQTC4qy+MIOqgjThBBdHhQlpEgiiKKDig6bA5EE0TFITBERVk0LEG2EMAIDAKig0Qwub/nj3M6qVup3u5t0rc733de/crtqlOnT51T3X3q1K9OKyIwMzMzM7PRb0y3C2BmZmZmZq1x593MzMzMrEe4825mZmZm1iPceTczMzMz6xHuvJuZmZmZ9Qh33s3MzMzMeoQ772ZmZmZmdUi6SNKTku6us16SzpP0oKQ7JU0srDtS0gP5cWQnyuPOu5mZmZlZfd8CDmiw/h3AhPw4BrgAQNK6wL8CuwNvAP5V0jojLYw772ZmZmZmdUTETcAzDZIcDFwSyS+BtSVtBLwd+GlEPBMRfwR+SuOTgJa8bKQZmJmZNfO3px7yz3ln++78gW4XYdSYsOqIByH7woRYvdtFGFVOeuS7Gmke7XzmrLbeVseSRsxrLoyIC9t4uU2A3xWeL8zL6i0fEXfezczMbIVzx91Gi9xRb6ezXlZ1shENlo+Iw2bMzMzMrL8MLmn9MXILgc0KzzcFHmuwfETceTczMzOz/hKDrT9GbiZwRJ515o3AnyLiceAnwNskrZNvVH1bXjYiDpsxMzMzs74SSxZ3LC9JlwF7A6+RtJA0g8yqABHxNeBa4O+BB4HngaPzumckfRa4NWd1WkQ0uvG1Je68m5mZmVl/GezIiDoAETHQZH0Ax9VZdxFwUccKgzvvZmZmZtZvOhMOMyq5825mZmZm/aUzN6KOSu68m5mZmVl/8ci7mZmZmVlv6OQNq6ONO+9mZmZm1l86eMPqaOPOu5mZmZn1F4fNmJmZmZn1CN+wamZmZmbWIzzybmZmZmbWIxzzbmZmZmbWIzzbjJmZmZlZb4hwzLuZmZmZWW9wzLuZmZmZWY9wzLuZmZmZWY/wyLuZmZmZWY/wPO9mZmZmZj3Cs82YmZmZmfUIh82YmZmZmfUI37BqZmZmZtYj+rjzPqaVRJImSwpJ2+Xn4yXdXZHuW5IOzX/fKOlRSSqs/76k5wp5LJI0t/A4Iq97WNJVhe0OzXkfXUj7oqS78t9n5XSTJN0p6d68blIhjzdK+lVO/1tJp7aw3z+QdHNp2amSfp/zuUfSQGn/F+R1d0jar7BuNUlflDRf0gM5700L9Tu39BiU9I6mjZO230DSpZIeknS7pJslTc7r9pb0J0m/yfUyvbTtepL+JunY0vLKNig8H3FdS9pe0v2SxhaW/VDS1Drpj5L0h0Ldf6CwbsgxmpeNkXSepLtzGW+VtEWhbI8W8pubj8mXSXpK0pnNa75h/Y2kTRrVbfk9dlth3W6Sbqx4jfsk3STpwKp8Cstq783h1NvDOe2dkv5b0rhyvoXnx0v6q6RXFZbtLemaFuu84WdLfr69pNn5+HpA0qdr6fNx9JWKfB+W9Jr8d0g6p7BuWvE4lnRMbp97Jd0iac8mZT4wt8Ud+dg9tpW8GrVxfr5n3qa2/TGFdXU/q/L65d4zTfZhuXYzMxutIpa0/Og1LXXegQHgZ0Blp6qBZ4E9ACStDWxUWj8/InYpPC4prNtN0vbFxBFxcS0t8BiwT37+SUk7A9OBgyNiO+AgYLqknfLm3waOydvuAFzZqOC5vBOBtSVtUVp9bs7nYODrklYtrDshr/sY8LXC8jOAtYBtImIC8H3gakmKiBnFegC+CswBftKojLmcynndFBFbRsTrSe20aSHZnIjYFdgVOFDSHoV1hwG/JLVx2XJtkF+zI3UdEfOAq4FP5XwnAatGxOUNdvmKnO/ewBmSNsjLq47RKcDGwE4RsSMwGXg2InbPeXymll9+PAy8DbgPeHexc9jAcvU3kjZpoW7L1lf9k7w5EbFrRGwLfBT4igonlA0Mp94gvR93Am4ETmmQ/wBwa853uOp+tiidDM4EzoqIbYCdgTcB/9RG/i8Ah9Q680X5JOhYYM/cRh8ELpW0YVVG+fPhQuCdEbEzqc1vbCOvyjbOaS4FPpi33RM4VtI/FJI1+qxq93O9E+1mZrZiLFnc+qPHNO28S1qT9CX5ftrvvF9e2OYQUketVdOBk9tIPw04IyIWAOT/zwROyOvXBx7P65ZExD1N8nsXMIuh+zBERDwAPA+sU7H6ZmATAElrAEcDx0c+xYuIi0kdhH2LG0nahtQ5el9ES3db7Au8GBFLTxQi4pGI+HJFeRcBc2vlygaAfwE2lbRJaZN6bdDJuj4NOEzSLsBZwHEN0hb35UlgPjCuwTG6EfB4rR4jYmFE/LFJ1gPAl4BHgTe2UJSq+htJmzSr27KzadxRrr3OXFJdf7iFfRpOvRUtPfbLJG0FrEkqc9UJY6safbYcDvw8Iq4DiIjnSfv9yTbyX0zqcB9fse5E0kn6Uzn/X5NOWOsdu2uRQhSfzulfiIj72sirXhsfB3wrb0PO4xNU7Gf5s6rdz/UOtpuZ2YoxONj6o8e0MvI+CfhxRNwPPCNpYhv5Xw+8WdIqpC+IK0rrt9LQUJG9CuuuBCZK2rrF19oeuL207La8HOBc4D5JMyQdK2n1JvkNAJflR+WXVa6LB3JHsuwA0ugrwNbAoxHx5wblq43QXQpMi4hHm5SvZnvg160klLQOMAG4KT/fDNgwIm4h1feU0ib12qBjdZ07VtNymS7PnYxW9mVLYEvgQeofo1cC78zH1jmSdm2S51hgP+AaGrR7IX29+ht2m9C8bstuBl6QtE8LL/droJUQibbqrULx2C+rva/mANtKWr/NvGsafbYsV4cRMR9YU9Ir23iN84H3VISJtNVGEfEM6UrAI5Iuk/QeSbXP3lbyqtfGLZej4rOq3c/1YbVbDgm6TdJt37zkslY2MTPrjBhs/dFjWum8D5BGucj/tzPqsoR0WXYKMLZweb2mHDYzp7Tt2cBJLb6WgKi3LCJOA3YDriONzP24bkYpFGNr4Gf5y22xpB0KSY6XdB/wK+DU0uZnS3oI+C4pVKZe2aqWfxaY1yRspCFJ5+e42lsLi/eSdCfwBHBNRDyRl09lWUhLVdvWa4OO1XVOP4sUBvHVxnsHwBRJc0kdiWNzx6jyGI2IhcC2ufyDwPVNwkYOBG7IJxRXAZNz57CeZvUHtN0mDeu2js/Rwuh7zqemKr9a+7VbbzU3SHoS2J90ElplKukkbZA0Wn5YC/lWafTZ0qi+GtXj0ITpZPsSUshRMw3bKCL+kXRieAvpZPWiNvOqauN6r1lcVu+zqt3P9WG1W0RcGBG7RcRu/3iEB+zNbAVaWUfeJb2aFALwTUkPky7dT2FoJ6CZy4Ev0yTGvI7vAG8GNm8h7TxSh7FoIrA0ZCMi5kfEBaQv0Z3z/lWZQrq8vCDv93iGXlo+N8cRTwEuKY0sn0Dq+J9CuvwNaXR4nKS16pVP0t6kUJ1WwhqK5uV8AIiI40j7t14hzZwci7wj8KEcogLpC/uovI8zSXUyoZR/VRt0sq5rBvOjmVqs9e4RMaPeMVqLV88hCj+KiBNIJ1OT6uac6mP/nM/twKuBRiPa9epvJG3StG7LImI2sDrNw3x2BX6b/36aQriXpHWBpwp5tlNvNfsA4/I+nFZemeP2JwA/zXU2lZGHzlR9tixXh/lKzXMR8b9tvsYXSaElrygsuwd4fSldwzYCiIi7IuJc4K2k93rLedVp46pj5fWlbZf7rGr2nil7CdrNzOyltxKPvB8KXBIR4yJifERsBixg6I13zcwhxey2fc00Iv5GCsH4WAvJpwMnSRoPaTYbUrz2Ofn5PxS+nCaQRu6erZPXAHBA3ufxpC/E5eJCI+Jq0mXqI0vLB0lx02MkvT0i/kLqyH+hNpKrNLPOGsDsHDpxMXBEVedC0r0N9ns2sLqkDxWWrVGVMF9FOBM4UdK2wCsiYpPCfp5Z3s86bdDJuh6pesfonpImSto4l2kMsBPwSFUmOZxiT2DzQn0cR/3R9Eb1N6w2yYsa1m0Dp5PinSvlDtinSaEgkG6YnCJptfz8KOCGnLbleqvYn0WkY+WIfEJQNACcWquviNgY2ESFmWnaVO+z5T9I7b9/3oexwHnA59t9gXxl50pSB77m88C/1U5I84nXUdS5ciRpzXxyXrMLy+qznbzKbXw+6eRxl7ztq4F/o2I/S59Vdd8zlZXQ+XYzM3vprawj76QP7RmlZVeROhPbSlpYeFReRo1keu2GrJJyzHvV5el/p4X56PMNeScCs3Jndxbwibwc4H2kOOy5pNHk90TF/EC5s7Q5aQaRWt4LgD9L2r3ipU8DPl6IYa1tE6RL3bUv25OAvwL3S3qAdNl5ck73QdJNnheU6mOK0mwXda905O0nAW9RmqbyFtKJwol1NvkaaST9ZKrbtqqzOqQNOlXXHVLvGD2cVKezlKY1vZN0E+JyUwRmhwCzI+KFwrIfAAdJenkbrzsw3DaRtEULdVspIq4F/lBavJfyVJGkjt5HI+L6nP4aUuf39txOexTK1069VZXlcVKHunwD51SWr7MZLDth3K/0mfJ3TV6n8rMln0AcDJyS9/0u0iwpxX04qvRajQYkzgGWzjoTETNJYS+/yG30DeC9eb+rCPiE0pSdc4H/R+qgt5VXuY1zmvcC38jb/gK4KIehVTkN+DjwHuq/Z6rUbTelqSu/WWc7M7Pu6ePZZpT6GTZaKU0lt2VEnNftspiZDdffnnrIXzbZvjt/oHmilcCEVasmals5TYhmc2isXE565LvthGdXWjRzesufOWMPmjbi11uR/Auro1weITUzMzOzVvVgLHurVurOu6SjgX8uLf55vsFwVMnxrNdXrNovIp5e0eVpVzt1PdraRdIMoPxDXSdGRNMf0bLh68V678Uy10jakRTmVvRCRFSFC5qZjW49GMveqpW68x7ph5Iu7nY5WpE76Ls0TThKtVPXo61dIsK/KNkFvVjvvVjmmoi4ix7+jDEzG8Ij72ZmZmZmPcIj72ZmZmZmPWLJSzXJXfe5825mZmZm/aWPR96bzfNuZmZmZtZbOvgjTZIOyL/V8aCkT1asP7fwGz33S3q2sG5JYd3MTuyaR97NzMzMrL906IZVSauQfujwrcBC4FZJMyPinqUvFXF8If1HgF0LWSyKiI5OBuCRdzMzMzPrL50beX8D8GBEPBQRLwKXk37Fu54B0q+Mv2TceTczMzOz/rJkScsPScdIuq3wOKaQ0ybA7wrPF+Zly5E0jvRbH7MLi1fPef5S0qRO7JrDZszMzMysv7Rxw2pEXAhcWGe1qjapk3Yq8J8RUZzqZvOIeEzSlsBsSXdFxPyWC1fBI+9mZmZm1l9isPVHYwuBzQrPNwUeq5N2KqWQmYh4LP//EHAjQ+Phh8WddzMzMzPrKzEYLT+auBWYIGkLSauROujLzRojaVtgHeDmwrJ1JL08//0aYA/gnvK27XLYjJmZmZn1lw7N8x4RiyV9GPgJsApwUUTMk3QacFtE1DryA8DlEVE8G3gt8HVJg6QB87OKs9QMlzvvZmZmZtZfOjRVJEBEXAtcW1r2mdLzUyu2+wWwY8cKkrnzbmZmZmb9ZfGS5ml6lDvvZmZmZtZfOhQ2Mxq5825mZmZm/SWa3ojas9x5NzMzM7P+4pF3MzMzM7Me0XwKyJ7lzruZmb3k9t35A90uwqgx+45vdLsIo8bYjffqdhFGhVVXcXes6KROZLLEN6yamZmZdYw77vZSCofNmJmZmZn1CIfNmJmZmZn1iA7+SNNo4867mZmZmfUXj7ybmZmZmfUIx7ybmZmZmfUIzzZjZmZmZtYjHDZjZmZmZtYbPFWkmZmZmVmv8Mi7mZmZmVmPcOfdzMzMzKxHeJ53MzMzM7PeEIvdeTczMzMz6w0OmzEzMzMz6xGebcbMzMzMrEd45N3MzMzMrEe4825mZmZm1htiicNmzMzMzMx6g0fezczMzMx6Q7jzbmZmZmbWI9x5NzMzMzPrEf0b8u7Ou5mZmZn1F4fNmJmZmZn1isXuvJuZmZmZ9QSPvJuZmZmZ9Yo+jnkf0+0CVJE0WVJI2i4/Hy/p7op035J0aP77RkmPSlJh/fclPVfIY5GkuYXHEXndw5KuKmx3aM776ELaFyXdlf8+K6ebJOlOSffmdZMKebxR0q9y+t9KOrWF/f6BpJtLy06V9Puczz2SBkr7vyCvu0PSfoV1q0n6oqT5kh7IeW9aqN+5pcegpHc0bZy0/QaSLpX0kKTbJd0saXJet7ekP0n6Ta6X6aVt15P0N0nHlpZXtkHh+YjrWtL2ku6XNLaw7IeSptZJf5SkPxTq/gOFdUOO0bxsjKTzJN2dy3irpC0KZXu0kN/cfEy+TNJTks5sXvNN6++uXEf/LWlcYd2S/Hp3S5olae1SnczO9fKApE9LQ95D75B0W67Xpe1ZOi5rj7WH2/519vVhSa+ps+54SX+V9KomedTKUyzn/nndpyTNy3U2V9LueflIP0sq2yGvr/cen1ZR9lq7zVN6f39c0phSmuXyq1MP2+b9qr1HLmyQdrljuyJNZd2ZmY0WMRgtP3rNqOy8AwPAz4DKTlUDzwJ7AOQOykal9fMjYpfC45LCut0kbV9MHBEX19ICjwH75OeflLQzMB04OCK2Aw4CpkvaKW/+beCYvO0OwJWNCp7LOxFYW9IWpdXn5nwOBr4uadXCuhPyuo8BXyssPwNYC9gmIiYA3weulqSImFGsB+CrwBzgJ43KmMupnNdNEbFlRLye1E6bFpLNiYhdgV2BAyXtUVh3GPBLUhuXLdcG+TU7UtcRMQ+4GvhUzncSsGpEXN5gl6/I+e4NnCFpg7y86hidAmwM7BQROwKTgWcjYvecx2dq+eXHw8DbgPuAdxc7iw00qr99ImIn4EbglMLyRfn1dgCeAY7L+z8WmAmcFRHbADsDbwL+Ka/fAfgK8N6IeC2pbh8q5Htu6f30bF4+3PZvxwBwK6mOm5lTKud/Sfo74EBgYq6z/YHfFbYZyWdJZTs0eY9XqbXb9sBbgb8H/nWY+Z3HsvZ6LfDlBmkbfv62UHdmZt032Majx4y6zrukNUlfmu+n/c775YVtDiF11Fo1HTi5jfTTgDMiYgFA/v9M4IS8fn3g8bxuSUTc0yS/dwGzGLoPQ0TEA8DzwDoVq28GNgGQtAZwNHB8RCzJ214MvADsW9xI0jakTuX7IqKVQ3hf4MWIWHqiEBGPRMRynYGIWATMrZUrGwD+BdhU0ialTeq1QSfr+jTgMEm7AGeRO7LNRMSTwHxgXINjdCPg8Vo9RsTCiPhjk6wHgC8BjwJvbKEojeqvZumx0GTd4cDPI+K6XN7ngQ8Dn8zrPwGcHhH35vWLI+KrLZSRnL7d9m+JpK2ANUkd4+GeBGwEPBURL+SyPhURjxXWj+SzpKbcDk3f4/Xk4+8Y4MOFk7x28tsIWFjI766qRC1+/jaru2J+x+QrN7c98ZffNymimVnnxGDrj2YkHSDpPkkPSvpkxfrilfq5kv6xsO5IpSvbD0g6shP7Nuo678Ak4McRcT/wjKSJbWx7PfBmSauQvniuKK3fqnSpe6/CuiuBiZK2bvG1tgduLy27LS8HOBe4T9IMScdKWr1JfgPAZflR2SHJdfFA/iIvO4A0Ig6wNfBoRPy5QfnII/iXAtMi4tEm5avZHvh1KwklrQNMAG7KzzcDNoyIW0j1PaW0Sb026Fhd5w7qtFymy/MJUSv7siWwJfAg9Y/RK4F35mPrHEm7NslzLLAfcA0N2r2Qvln91RSPheL2q+TXm5kXLVevETEfWFPSK0kj7eV6Lzq+8F66oeL12m3/VtXeK3OAbSWt3yT9XqX3/VbAdcBmSuFCX5X0ltI2I/ksqSm3Q9P3eCMR8RDpM7u2v+3kdy4wW9KPlEKO1q6TrpXP32Z1VyzzhRGxW0TstuErhnWuZmY2LLG49Ucj+XvgfOAdwOuAAUmvq0havLL+zbztuqQrprsDbwD+NX83jsho7LwPkEaSyP+38yW3hHS5dwowNoclFJUvdc8pbXs2cFKLryWgHCi1dFlEnAbsRvqiOxz4cd2MUijG1sDP8pfm4hyyUHO8pPuAXwGnljY/W9JDwHdJoTL1yla1/LPAvCZhIw1JOl8pHvfWwuK9JN0JPAFcExFP5OVTWRbSUtW29dqgY3Wd088ihUW0Moo8RdJcUgfp2Ih4hjrHaEQsBLbN5R8ErlfhPoQKBwI35BOKq4DJ+UOinmb1d4OkJ0lhDJcWlo/N+/A0sC7w07y83nFCg+VFxbCZfQrLh9v+rZpKOvEaJI2IH9YkfTlsZn5EPAe8njSa/QfgCklHFbYZyWfJcu3Qwnu8VRpOfvnK22uB75FCwH4p6eUVSZt+/rZQd2Zm3de5sJk3AA9GxEMR8SLps/HgFkvxduCnEfFMvhL/U9LAzoiMqs67pFeTwjK+KelhUljEFPIXVosuJ8VzNowxr+M7wJuBzVtIO4/UYSyaCCwN2cidhAtIo5075/2rMoUUCrMg7/d4hl6yPjcits3pLimNLJ9A+hI/hRT7DWl0eJykteqVT9LepMvuH262oyXzcj4ARMRxpP1br5BmTo6F3RH4UA5RgdQROCrv40xSnUwo5V/VBp2s65pWI91qZ9K7R8SMesdoLZQhIl6IiB9FxAmkk6lJdXNO9bF/zud24NXAPk3SN6q/fYBxpPo6rbB8UaSY+3HAaiwLFVquXvMVhuci4n/z+tc3KE89I2n/hpTuc5gA/DTnM5VhngTkEKsbI+JfSe+Dd5WSDPezpKodmr3Hm8ptswR4cjj5RcRjEXFRRBwMLCZdWSnm3/DYLuXVrO7MzLqqg2EzmzD0vp6FVIemvkvpJv7/zFea29m2LaOq8w4cClwSEeMiYnxEbAYsYOjNkM3MIcVDX9bui0fE30iXlz/WQvLpwEmSxkOagYIUr31Ofv4PhS+9CaQv3WfLmWQDwAF5n8eTOkzLfRFHxNWkcJEjS8sHSXHTYyS9PSL+QurIf6E2kqs0G8YapEvn6wAXA0fkTtoQku5tsN+zgdUlfaiwbI2qhHlE8EzgREnbAq+IiE0K+3lmeT/rtEEn63qk6h2je0qaKGnjXKYxwE7AI1WZ5LCUPYHNC/VxHPVDplqtv0WkujsiX64rrvsT8FFgWg6Z+o9c7trsK2NJNzZ+Pm9yNnCy0n0Rtdl0Pt5qRQ2n/VswAJxayyMiNgY2UWlWl2aUZl8pnjjswvJtNZLPknI7tPQeb1De9Ug3pH8lIqLd/JTiNVfNf29IOlEsB6HXPbZLebVSd2ZmXdVO512F+3Py45hCVlUDyOWr07OA8Xng6r9YNpjayrZtG22d9wFgRmnZVaSO2raSFhYelZfKI5keEU9VrC7HqX60Is2/08L89xExFzgRmJU7u7OAT+TlAO8jxWHPJY0mvyfyzaNFuSO6OWkGjlreC4A/q3r6tdOA5aaMy1/onyPdZAgpdOOvwP2SHiCFFkzO6T5Iipu9oFQfU5Sm5qt7pSNvPwl4i9I0lbeQDtIT62zyNdJI+slUt21VZ3VIG3Sqrjuk3jF6OKlOZylNa3onaXTzK3XyOQSYHfmmv+wHwEENwhlaqr+IeJzU4VzuZtyI+A1wBzA1dzAPBk7JYVl3kWZw+UpOeyepA3qZpN8CdzN01pXjS8fP+IpyD6f9i+4svOe/QOqglvOZQeOOcDnm/VDSDa/fVpoC9E5SHOOpxY1G+llSaodm7/FTip9vednYnPc80pfBdcD/G8ZnBqRZje6WdAdpVqkTIuIJSRtLujanqXtsl9I1rTszs25rp/Mehftz8qM4ne5CYLPC801JMxAue62Ipwvf599g2VXrptsOh1JfzCyRdCCwZUSc1+2ymFn/2GuT/fxlk82+4xvdLsKoMHbjqvu8V06rruLfzCxatOiRdsKlKz3x5r1b/szZ8KYb676epJcB95PCcn9PGuQ6PNL007U0G+UBG5R+9+bEiHhjvvJ6O8vCjX8NvD7S/XPD5qPFhoiIa7pdBjMzM7ORiMER9/9TPhGLJX2YdNVyFeCiiJgn6TTgtoiYCXxU0kGkK+7PAEflbZ+R9FlShx/gtJF23MGd9xVK0tHAP5cW/zzf9Dmq5JvXrq9YtV9EPL2iy9Oudup6tLWLpBlA+Ud3ToyIpj+i1Ysk/Qoohwq9L+rMRV4nj7cD/1ZavCAiWvkRp74h6VMsP/vO9yLi9G6Ux8ysW1r65ZpW84q4Fri2tOwzhb9Pos5shRFxEXBR50rjsBkzM1sBHDazjMNmEofNLOOwmaE6ETbz+7/bt+XPnE1unt2ZYfoVxEeLmZmZmfWVTo68jzbuvJuZmZlZX+lUzPto5M67mZmZmfWVwSXuvJuZmZmZ9QSPvJuZmZmZ9Yh+no/FnXczMzMz6yseeTczMzMz6xER7rybmZmZmfUETxVpZmZmZtYjlgyO6XYRXjLuvJuZmZlZX3HMu5mZmZlZj/BsM2ZmZmZmPcIj72ZmZmZmPWLQs82YmZmZmfWGQY+8m5mZmZn1Bo+8m5mZmZn1CP9Ik5mZmZlZj/BsM2ZmZiMwYdV1ul2EUWPsxnt1uwijxqLH5nS7CKPC4l9c3e0i9B2HzZiZmZl1kDvu9lJy2IyZmZmZWY9Y4s67mZmZmVlvcNiMmZmZmVmPcNiMmZmZmVmPGOx2AV5C7rybmZmZWV8JPPJuZmZmZtYTFjtsxszMzMysN3jk3czMzMysRzjm3czMzMysR3jk3czMzMysR3jk3czMzMysR7jzbmZmZmbWI5bIYTNmZmZmZj1h0DHvZmZmZma9IbpdgJfQmG4XwMzMzMyskwbbeDQj6QBJ90l6UNInK9Z/XNI9ku6UdL2kcYV1SyTNzY+ZHdg1j7ybmZmZWX8Z7FDMu6RVgPOBtwILgVslzYyIewrJfgPsFhHPS/oQ8HlgSl63KCJ26UhhMo+8m5mZmVlfiTYeTbwBeDAiHoqIF4HLgYOHvFbEDRHxfH76S2DTjuxEHb1Dz68AACAASURBVO68m5mZmVlfWazWH5KOkXRb4XFMIatNgN8Vni/My+p5P/CjwvPVc56/lDSpE/vmsBkzMzMz6yvtzDYTERcCF9ZZXZVR5YC9pPcCuwFvKSzePCIek7QlMFvSXRExv+XCVfDIu5mZmZn1lQ6GzSwENis83xR4rJxI0v7Ap4CDIuKFpeWIeCz//xBwI7Br+3szlDvvZmZmZtZXBtX6o4lbgQmStpC0GjAVGDJrjKRdga+TOu5PFpavI+nl+e/XAHsAxRtdh8VhM2ZmZmbWV1qZArIVEbFY0oeBnwCrABdFxDxJpwG3RcRM4GxgTeB7SrPcPBoRBwGvBb4uaZA0YH5WaZaaYXHn3czMzMz6ypIO/sBqRFwLXFta9pnC3/vX2e4XwI6dK0nisJmXmKTJkkLSdvn5eEl3V6T7lqRD8983SnpUWjZJqaTvS3qukMeiwqT/cyUdkdc9LOmqwnaH5ryPLqR9UdJd+e+zcrpJ+ccF7s3rJhXyeKOkX+X0v5V0agv7/QNJN5eWnSrp9zmfeyQNlPZ/QV53h6T9CutWk/RFSfMlPZDz3rRQv3NLj0FJ72jaOGn7DSRdKukhSbdLulnS5Lxub0l/kvSbXC/TS9uuJ+lvko4tLa9sg8LzEde1pO0l3S9pbGHZDyVNrZP+KEl/KNT9BwrrhhyjedkYSedJujuX8dZ8ybBWtkcL+c3Nx+TLJD0l6czmNd+0/u7KdfTfqv6xi7slzZK0dqlOZud6eUDSp6X0HpJ0cekYeVjS/zQoW/FYLb5PbpS0WymtJJ2SX/N+STdI2r7F/Xmuop2+kv9e+plQTq/C50g+Tq9psC93SLqs3vpCupbf55KOl/RXSa9qlq+ZWTd08keaRht33l96A8DPSDFS7XiWFBtF7qBsVFo/PyJ2KTwuKazbrdh5AIiIi2tpSTda7JOff1LSzsB04OCI2A44CJguaae8+beBY/K2OwBXNip4Lu9EYG1JW5RWn5vzOZh0KWnVwroT8rqPAV8rLD8DWAvYJiImAN8HrpakiJhRrAfgq8Ac0uWthnLH7vvATRGxZUS8ntROxflZ50TErqQbTA6UtEdh3WGk+VwHWN5ybZBfsyN1HRHzgKtJN8eQTwBWjYjLG+zyFTnfvYEzJG2Ql1cdo1OAjYGdImJHYDLwbETsnvP4TC2//HgYeBtwH/DuWqe5iUb1t09E7ES6ueeUwvJF+fV2AJ4Bjsv7P5YUg3hWRGwD7Ay8CfgngIg4unCMTAQeJdddA+cW9m+5X9QrOC6/1s75tc8EZkpavYX9eUlJei3pc/7Nkl7RJHk77/MBUhzo5I4U1Mysw9x5t2GRtCapA/5+2u+8X17Y5hBSR61V04GT20g/DTgjIhYA5P/PBE7I69cHHs/rlrQQr/UuYBZD92GIiHgAeB5Yp2L1zeQ5VCWtARwNHB8RS/K2FwMvAPsWN5K0DalT+b6IaOX9uC/wYkQsPVGIiEci4ssV5V0EzGXo3K4DwL8Am0oqz/larw06WdenAYdJ2gU4i9yRbSbfTDMfGNfgGN0IeLxWjxGxMCL+2CTrAeBLpI7xG1soSqP6q1l6LDRZdzjw84i4Lpf3eeDDQFWn+2TgqYj4ZgtlbMWJwEdqP9CRy/AL4D1NyrwiHA58B7iOdKLYSEvHnqStSLGdp1B94lVMu3Tu5Pv+96F2y25mNmyh1h+9xp33l9Yk4McRcT/wjKSJbWx7PWm0bBVSp+qK0vqtSmEAexXWXQlMlLR1i6+1PXB7adlteTnAucB9kmZIOrY0olhlALgsPyq/3HNdPFC8K7vgANKIOMDWpBs//tygfOQR/EuBaRHxaJPy1WwP/LqVhJLWASYAN+XnmwEbRsQtpPqeUtqkXht0rK5zZ3FaLtPl+YSolX3ZEtgSeJD6x+iVwDvzsXWO0p30jfIcC+wHXEODdi+kb1Z/NcVjobj9Kvn1anf8L1eveR7dNSW9srDdG4B/zI9mji+8v95eZz9eCbyiYs7eIcdng/0ZW3wfk07IOmkK6bOjaZvQ+rFXe3/PAbaVtH69DCPiwojYLSJ223atLYdRfDOz4fHIuw3XAGn0mfx/sy/PoiWkUIYpwNgcllBUDpuZU9r2bOCkFl9LLD/V6dJlEXEa6UcHriON5P24bkYpFGNr4Ge5Q7hY0g6FJMdLug/4FXBqafOzJT0EfJcUKlOvbFXLPwvMaxI20pCk83N88K2FxXtJuhN4ArgmIp7Iy6eyLKygqm3rtUHH6jqnn0UKsfpq470DYEruIF4GHBsRz1DnGI2IhcC2ufyDwPUq3IdQ4UCg9vPQVwGTcwe7nmb1d4OkJ4H9SSdlNWPzPjwNrAv8NC+vd5xQW56vMnwHeH/e92aKYTNNw7BKyuWptz+LYmjY12cK66r2p4UpiXMBpP8D/CEiHiENBkzMJ6GV2jj2ppJOFgdJVwQPa7VMZmYrijvv1jZJryaFZXxT0sOksIgpVP9SVz2XA1+mSYx5Hd8B3gxs3kLaeaQv7aKJFOYijYj5EXEBabRz57x/VaaQQmEW5P0ez9BwjHMjYtuc7pLS6N4JpI7/KaT4W0ijw+MkrVWvfJL2JoXqfLjZjpbMy/kAEBHHkfZvvUKaOTlWeUfgQzlEBVJn86i8jzNJdTKhlH9VG3Syrmta/fypxajvHhEz6h2jtXj1iHghIn4UESeQTqYa/azzALB/zud24NXAPk3SN6q/fYBxpPoqjkYvyp3cccBqLAsVWq5e8xWG5yLif/OiLwMzI+L6BuVqS74i9Jf8WkVD2pT6+9PI0xTCyiStCzzVRvEGgO1yHc8HXkl6n9TV7NjL92ZMAH6a851Ke4MSZmYrxBK1/ug17ry/dA4FLomIcRExPiI2AxYw9GbIZuaQ4qGbzhRRFhF/I10G/1gLyacDJ0kaD2kmC1Jc8Dn5+T8UbkCcQBpVfrZOXgPAAXmfxwO1m0DL5buaFFpwZGn5IClueoykt0fEX0gd+S/URnKVZtZZg/Qzw+sAFwNHFDppS0m6t8F+zwZWl/ShwrI1qhLmqwhnAidK2pYUKrFJYT/PLO9nnTboZF2PVL1jdE9JEyVtnMs0BtgJeKQqkxw6sifpJ6Br9XEc9UOmWq2/RaS6OyJ3XIvr/gR8FJiWQ6b+I5d7//waY4HzgM/n54eSbmJtdpPqcJwNnJdfs/Yre3sydIS94f7UcSPpZGq1/Pwo4IZWCpTb7DDSDce1Oj6YBh3tFo+9AeDUWp4RsTGwiQoz6JiZjQYeebfhGABmlJZdReqobStpYeFRedk5kukRUTXaVo55/2hFmn+nhbn8I2Iu6aa7WbmzOwv4RF4O8D5SLOxc0mjye2o3jxbljujmpBlEankvAP4safeKlz4N+HjuaBTLE8DngE/kRScBfwXul/QAqVMyOaf7IOlGuwtK9TFF6dfM6p5T5+0nAW9RmqbyFtKJwol1NvkaaST9ZKrbtqpjNKQNOlXXHVLvGD2cVKezlKYjvBNYDHylTj6HALOj8HPQwA+Ag5R/Wa7F112u/iLicdLJ63I340bEb4A7gKm5Y3wwcEoOy7qLNBtKrcynk66o3FI6TsaW823BDwvv3e+RRvRvBe7Kr/1p0mxCi9rZn4q015BO4G/Px8Me1D829yt+puR0v4+I3xfS3AS8TlJ55qqaymNP0m6Sajf3TmX5tptB+zfkm5m9pPq5867UfzHrP5IOBLaMiPO6XRazld3/HX+ov2yySx67uXmilcCix+Y0T7SSWPyLdiaU639jD5o24mCW6Zu/t+XPnGmPfrengmf8C6vWt/LIpZmZma1kBnuqO94ed95tWCQdDfxzafHP802fo0q+6a7qJsX9IuLpFV2edrVT16OtXSTNAMo/1HXiMGZveUlI+hTLz5byvYg4vRvlWREknU/+AbiCL0X6/QQzs77Qi+EwrXLn3YYlf9H3xJd97qDv0jThKNVOXY+2domIUf0LnLmT3rcd9Sqj8QTbzKzTlrQ+s27PcefdzMzMzPqKR97NzMzMzHpE/467u/NuZmZmZn3GI+9mZmZmZj3Cs82YmZmZmfUI37BqZmZmZtYjHDZjZmZmZtYjBj3ybmZmZmbWG/q36+7Ou5mZmZn1GYfNmJmZmZn1CIfNmJmZmZn1iCXdLsBLyJ13MzMzM+sr4ZF3MzMzM7Pe4Jh3MzMzM7Me4Zh3MzMzM7Me0b9dd3fezczMzKzPeOTdzMzMzKxHLHHn3czMbPgmxOrdLsKoseoq/uoFeOVm+/DMFR/pdjFGhZe96ZBuF6Hv+IZVMzMzsw5yx91eSp4q0szMzMysR3jk3czMzMysRwxG/468j+l2AczMzMzMOmkJ0fKjGUkHSLpP0oOSPlmx/uWSrsjrfyVpfGHdSXn5fZLe3ol9c+fdzMzMzPpKtPGvEUmrAOcD7wBeBwxIel0p2fuBP0bE1sC5wL/lbV8HTAW2Bw4AvprzGxF33s3MzMysrwy28WjiDcCDEfFQRLwIXA4cXEpzMPDt/Pd/AvtJUl5+eUS8EBELgAdzfiPizruZmZmZ9ZVBouVHE5sAvys8X5iXVaaJiMXAn4BXt7ht29x5NzMzM7O+0k7YjKRjJN1WeBxTyEqV2Q9VL00r27bNs82YmZmZWV9pZ6rIiLgQuLDO6oXAZoXnmwKP1UmzUNLLgFcBz7S4bds88m5mZmZmfWVJDLb8aOJWYIKkLSStRroBdWYpzUzgyPz3ocDsiIi8fGqejWYLYAJwy0j3zSPvZmZmZtZXOvUjTRGxWNKHgZ8AqwAXRcQ8SacBt0XETODfge9IepA04j41bztP0pXAPcBi4LiIWDLSMrnzbmZmZmZ9pdkUkG3lFXEtcG1p2WcKf/8VOKzOtqcDp3esMLjzbmZmZmZ9poVZZHqWO+9mZmZm1ldSyHl/cufdzMzMzPpKp2LeRyN33s3MzMysryzp4+67O+9mZmZm1lccNmNmZmZm1iN8w6qZmZmZWY/o5FSRo40772ZmZmbWVwYdNmNmZmZm1huWeOTdzMzMzKw3OObdzMzMzKxHeLYZMzMzM7Me0c8j72O6XYBeJ2mypJC0XX4+XtLdFem+JenQ/PeNkh6VpML670t6rpDHIklzC48j8rqHJV1V2O7QnPfRhbQvSror/31WTjdJ0p2S7s3rJhXyeKOkX+X0v5V0agv7/QNJN5eWnSrp9zmfeyQNlPZ/QV53h6T9CutWk/RFSfMlPZDz3rRQv3NLj0FJ72jaOGn7DSRdKukhSbdLulnS5Lxub0l/kvSbXC/TS9uuJ+lvko4tLa9sg8LzEde1pO0l3S9pbGHZDyVNrZP+KEl/KNT9BwrrhhyjedkYSedJujuX8VZJWxTK9mghv7n5mHyZpKckndlCvddt07x+Sc73bkmzJK1dWDdB0jV529sl3SDpzaX86x1/z0tav7DsufLfko4rHU935/p5bSHtl/KxPKb0Gkfk9PNyPU/Ly4vv72b7HpLOKTyfVu84KOxXvfeVJJ2SX+f+XFfbl7Zfrv3rvE7lMVEnbcvHgplZN0Qb/3qNO+8jNwD8DKjsVDXwLLAHQO64bFRaPz8idik8Lims2638BR0RF9fSAo8B++Tnn5S0MzAdODgitgMOAqZL2ilv/m3gmLztDsCVjQqeyzsRWLviy/3cnM/BwNclrVpYd0Je9zHga4XlZwBrAdtExATg+8DVkhQRM4r1AHwVmAP8pFEZczmV87opIraMiNeT2mnTQrI5EbErsCtwoKQ9CusOA35JauOy5dogv2ZH6joi5gFXA5/K+U4CVo2Iyxvs8hU5372BMyRtkJdXHaNTgI2BnSJiR2Ay8GxE7J7z+Ewtv/x4GHgbcB/w7ly3jdRt07x+Uc53B+AZ4Li8n6sDPwQujIitcpt9BNiylnGT4+8p4F8aFSwizi8dUzOB/4iI3+b8x+T6+B2w9KRB6YTxY8DbImL7XIY/DWPfXwAOkfSaRuUsqfe+Og54E7BzRGwDnAnMzPVY0+pnVOUxUSdtO8eCmdkKFxEtP3qNO+8jIGlNUgf8/bTfeb+8sM0hpI5aq6YDJ7eRfhpwRkQsAMj/nwmckNevDzye1y2JiHua5PcuYBZD92GIiHgAeB5Yp2L1zcAmAJLWAI4Gjo+IJXnbi0kdnH2LG0nahtSpfF9EtPK7x/sCL0bE0hOFiHgkIr5cUd5FwNxaubIBUkdwU0mblDap1wadrOvTgMMk7QKcRe7gNhMRTwLzgXENjtGNgMdr9RgRCyPij02yHgC+BDwKvLFeonbaNFt6PADvAW6OiJmF/bk7Ir5VSN/o+LsImCJp3Sb7Uivrm4F3A/9UWLwPcDdwAUNP3E4CpkXEY7lcf42Ib5Tya2XfFwMXAse3UsaiivfVicBHIuL5vP464Bekemz3M6qdY6KlY8HMrFuWxGDLj17jzvvITAJ+HBH3A89ImtjGttcDb5a0CulL9YrS+q1Kl/b3Kqy7EpgoaesWX2t74PbSstvycoBzgfskzZB0bGnUrsoAcFl+VI1Kk+vigdyRLDuANBoJsDXwaET8uUH5yCONl5I6T482KV/N9sCvW0koaR1gAnBTfr4ZsGFE3EKq7ymlTeq1QcfqOnfIpuUyXZ47bq3sy5akkeoHqX+MXgm8Mx9b50jatUmeY4H9gGto0O5ZS22a810l51vrrLfSZo2Ov+dIHfh/bpJHbQT/YuDIUllr+c8gXY2pjXLvwPJtW9bqvp8PvEfSq5qVs1Tmpe8rSa8EXhER8xu8VjufUS0dE+0cC5KOkXSbpNtuea6lw9fMrCMGiZYfvcad95EZII3+kf9v1KEpW0K6lD0FGJvDEorKYTNzStueTRoJbIVguaNz6bKIOA3YDbgOOBz4cd2MUijG1sDPcodgsaQdCkmOl3Qf8Cvg1NLmZ0t6CPguKbSgXtmqln8WmNckbKQhSecrxdvfWli8l6Q7gSeAayLiibx8KstCWqratl4bdKyuc/pZpNCFrzbeOyCNOM8ldaiOjYhnqHOMRsRCYNtc/kHgehXuQ6hwIHBDPqG4CpicO95VWmnTsbmsTwPrAj+tzCid5Nwt6er8vNnxB3AecGTu3DZyAfDdiPh54fVWA/4e+H7ugP+KFCLSqpaO55z3JcBHW8y30fuq0Wu1/BnVxjHR8rEQERdGxG4Rsdsb1pzQpNhmZp3jmHdbjqRXky6Df1PSw6SwiCmkL85WXQ58mSYx5nV8hxSPu3kLaeeROoxFE4GlIRsRMT8iLiCNqO2c96/KFNIl+wV5v8cz9HL8uRGxbU53SWlk+QRSx+sUUuw3pNHhcZLWqlc+SXuTQiU+3GxHS+blfACIiONI+7deIc2ciNgJ2BH4UA5RgdTJOSrv40xSnZR7H1Vt0Mm6rhnMj2ZqMeq7R8SMesdoLUY5Il6IiB9FxAmkk6lJdXNO9bF/zud24NWk8JIqTduUHPMOjANWY1lIULnNJgNHkTr40Pz4IyKeJV2lKYbCDCHpyLztZ0urDgBeBdyV89+TZR3eecDr6+WZtbLvNV8khbO8okmeUPG+yicAf8lXWpZ7rWbtX6XFY6KdY8HMrCsGI1p+9Bp33ofvUOCSiBgXEeMjYjNgAUNvhmxmDike+rJ2Xzwi/kYKwfhYC8mnAydJGg9pNhtSvPY5+fk/FL7QJ5BGlevdqDYAHJD3eTypM7NcLG1EXE26fH9kafkgKVZ2jKS3R8RfSB35L9RG75Rm1lkDmJ3DWS4GjoiI/y2/jqR7G+z3bGB1SR8qLFujKmEexT0TOFHStqRwhE0K+3lmeT/rtEEn63qk6h2je0qaKGnjXKYxwE7AI1WZ5BHsPYHNC/VxHHVGcZu1aSntn0ijz9MKoVF7SDqokKzYZi0df8AXgGOpmA43d3ZPB94TEYtLqweAfyzkvwXwthzLfibweUkb5nxeLmnIyHmb+/4M6cT9/RXlr1TxvjobOC+HsiBpf1JbXUqD9q/Ku5Vjot1jwcysWzzyblUGSDGxRVeROmrbSlpYeBxWlUEk0yPiqYrV5Zj3qsvr/04Lc/VHxFzSjW2zcmd3FvCJvBzgfaQ47Lmk0eT31G62K8od0c1JM7DU8l4A/FnS7hUvfRrwcZWm24uIAD4HfCIvOgn4K3C/pAdIs7xMzuk+SLrJ84JSfUxRmq2j0ShikEYO36I0TeUtpI7ViXU2+RppJP1kqtu2qoMypA06VdcdUu8YPZxUp7OUpjW9k3QT5Vfq5HMIMDsiXigs+wFwkKSX19mmUZsOERG/Ae4Apka6cfhA4INK03veTLpS87l2jr/8npoBVJXvRNJo99WlY+otwNtJs93U8vkLKbztnRFxLSlW/b8kzSONOle9/1red9JJXTuzzsDQ99WXgVtJVwruAz5NmuloEY3bv0rdY0LSNyXtxvCOBTOzFa6fb1hV9feJ2egn6UBgy4g4r9tlMbPGzhz3Xn/ZZKc9Oad5opXAM1d8pNtFGDVe9qZDul2EUWXV12w54ilot1lvt5Y/c+7/w209NeWtf2HVelZEXNPtMpiZmdno04vhMK1y590qSTqa5afb+3m+6XNUyTfmXV+xar+IeHpFl6dd7dT1aGsXSTNIceFFJ0ZE0x/RsqEkfYoUYlP0vYg4vcOvsyMpZKvohYioCn0zM+tJvXgjaqscNmNmZi85h80s47CZxGEzyzhsZqhOhM1s+ZpdW/7Meeip3zhsxszMzMysW1r7Ifbe5M67mZmZmfWVXpxFplXuvJuZmZlZXxn0DatmZmZmZr2hn+/pdOfdzMzMzPpKP8824867mZmZmfUVz/NuZmZmZtYjHDZjZmZmZtYjPNuMmZmZmVmPcMy7mZmZmVmP6OewmTHdLoCZmZmZWScNEi0/RkLSupJ+KumB/P86FWl2kXSzpHmS7pQ0pbDuW5IWSJqbH7s0e0133s3MzMysr0REy48R+iRwfURMAK7Pz8ueB46IiO2BA4AvSlq7sP6EiNglP+Y2e0GHzZiZmZlZX1mBN6weDOyd//42cCNwYjFBRNxf+PsxSU8C6wHPDucFPfJuZmZmZn1lMKLlh6RjJN1WeBzTxkttEBGPA+T/12+UWNIbgNWA+YXFp+dwmnMlvbzZC3rk3czMzMz6SjvhMBFxIXBhvfWS/gvYsGLVp9opk6SNgO8AR0YsvTRwEvAEqUN/IWnU/rRG+bjzbmZmZmZ9pZO/sBoR+9dbJ+l/JG0UEY/nzvmTddK9EvghcEpE/LKQ9+P5zxckXQxMa1Yeh82YmZmZWV9ZgTeszgSOzH8fCfygnEDSasAM4JKI+F5p3Ub5fwGTgLubvaA772ZmZrbCrTvly90ugvWxFdh5Pwt4q6QHgLfm50jaTdI3c5p3A28GjqqYEvI/JN0F3AW8BvhcsxdUP09ib2ZmViTpmBzfutJzXSSuh2VcF73BI+9mZrYyaWcWiX7nukhcD8u4LnqAO+9mZmZmZj3CnXczMzMzsx7hzruZma1MHM+7jOsicT0s47roAb5h1czMzMysR3jk3czMzMysR7jzbmZmZmbWI9x5NzMzMzPrEe68m5mZ2UpN0maSTuh2OUYLSat2uwxWnzvvZmZmfUzS/5G0YeH5EZJ+IOk8Set2s2zdJOk1kj4k6SbgRmCDLhepq5TsK+mbwMJul8fqc+fdzMxWKpJWtunwvg68CCDpzcBZwCXAn1jJpgaUtFY+efkxcAuwNbBlRGwVEdO6XLyukLS7pC8BjwAzgTnAdt0tlTXiqSLNzGylIun1EXF7t8uxoki6IyJ2zn+fD/whIk7Nz+dGxC7dLN+KJGkRqdN+CvCziAhJD0XEll0u2gon6XTg3cCjwGXADOC2iNiiqwWzpjzybmZmKw1JmwH7drscK9gqkl6W/94PmF1Y97KK9P3sZGB14ALgJElbdbk83XQM8D+kuvhuRDwNeES3B7jzbmZmfc2xzVwG/LekHwCLSGERSNqaFDqz0oiIcyNid+AgQMD3gY0lnShpm+6WboXbEDidVBcPSvoOMLZwomejlMNmzMys70haC5gMHA5sQwoJmBIRm3a1YF0i6Y3ARsB1EfGXvGwbYM2I+HVXC9dlknYEBkjHx0o5Ei9pdeBAUj3sCVwfEYd3t1RWjzvvZmbWdxzbbDY8kl4JTI6Ib3e7LFbNYTNmZtaPHNvcAknXdLsMo8VKOAtRpYj4M3BXt8th9bnzbmZmfcexzS37QLcLMIp8vdsFGEU+1O0CWH0OmzEzs5WCY5uHkrQHcHhEHNftsnSTpHWAZ8MdIusRHnk3M7OVQkTcFREnFzvukm7uZplWNEm7SPq8pIeBzwH3drlIK5Skz0jaLv/9ckk3APOB/5G0f3dLt2JJGifpVYXn+0j6kqSPS1qtm2Wzxtx5NzOzldnq3S7AS03SNrnT+lvgK8DvSFfe94mIL3e5eCvaFOC+/PeR+f/1gLcAZ3SlRN1zJfAKSCd1wPdIP9i0M/DVLpbLmvBcnmZmtjJbGUIl7iXN7f7OiHgQQNLx3S1S17xYCI95O3B5RCwBfrsSzm8+NiIey3+/F7goIs6RNAaY28VyWRMeeTczM+tv7wKeAG6Q9A1J+5Fu4l0ZvSBpB0nrAfsA1xXWrdGlMnVL8RjYF7geICIGu1Mca9XKdpZpZmZW1Ped2IiYAcyQ9ApgEnA8sIGkC4AZEXFdwwz6yz8D/0kKlTk3IhYASPp74DfdLFgXzJZ0JfA4sA4wG0DSRsCL3SyYNebZZszMbKVRnmFF0g4RcXeXi7XCSVoXOIw0886+3S7PaCPpyH7/kSJJIt0DsBFwZUT8Pi/fFVg/In7SzfJZfe68m5lZX8s34x0OvBtYAFy9Et6oaW2Q9OuImNjtcowGkm6OiL/rdjlsGYfNmJlZ38k/xDSVNK/708AV5BlWulqwUUbSNRFxYLfLMQr1fThVG/p+RqZe4867mZn1I8+w0hr/wmo1hyUs47oYZTzbjJmZ9SPPsFKHpFUldmgGLgAAIABJREFU7Spp/Yh4vNvlGaV8rNio5c67mZn1nYiYERFTgO2AGynMsCLpbV0t3Aom6WuSts9/vwq4A7gE+I2kga4WbhSRtEHh6c+7VpDRxycyo4xvWDUzs5VCnmHlUNJsM3t3uTgrjKR5EVHrvH8M2DsiJknaEPhRROza3RJ2Tz6ZeRfphubXRsQmXS5S13lGptHPMe9mZtaXJK0CrBMR/5+9ew/3dK73P/58mRCTw9gNyfmQymkah11SNCPZu9SQNENtqagrJOeiohLa22lLsstvJx1sIUxRbckpv0QY0pCIIcohpyTj+Pr9cd+r+VrWWjO6fnN/vt/7fj2ua12+9+dec12vWS15fz/fz/1+/7le+mv9z1cUilRKb8/urYGzAGzfW3UL7BZJSwDvoirYNwKWoup/f3nJXCWN1JFp6F4K9/6TYzMREdE6kmYADwG/lnSZpCnA7cC/UhUpXfKIpG3r/t2bAz8BkPQSYImiyRom6bvA74C3AV8BVgcetn1p1yaLSlpH0qGSbqb6WfyBuiNTWqn2t+y8R0REG30G2Nj2bZI2Aq4EZtTTRrvmo8CXqT5x2Mf2vfX6VsAFxVKVsT7wMHAz8Fvbz0rq6vnhdGQaUDnzHhERrTN8yI6k39p+TclM/U7SwbaPKp1jYZP0GqpPX6YD91M91LxBz5uaTpC0PdUshDdSfRpzBvB/bK9RNFjMV4r3iIhoHUl3A8f1LO3Xe237uBf8oY7r4lRRSZtQDfLaEbjb9hsLR2qcpPFUZ/53AqYCpwHn2r6waLAYVYr3iIhoHUmHjXXf9uebyjIoJM3qaucZSYsAB9n+UuksJdUdmXYEptueWjpPjCzFe0RERHRy572XpLtsr1o6R5MkLQa8D1iPapLqTcDptp8sGizGlG4zERHRSpL+VdLlkv4s6YG668zbS+fqY93rG/l8nfr7S1qXqlh/C3AXcHf9enZ9L/pUus1ERETrSNqdqsvKQcA19fImwJckrWz768XC9RFJm9r+VX15VtEw5XXtKMKJwMds/7R3UdJbgZOAKUVSxXzl2ExERLSOpJuAN9l+aNj6PwFX2H5tmWTl1buqM6geUHzU9iaFIzVG0g8ZuUgXMNX2+IYjFTNWByZJN3f535F+l533iIhoIw0v3AFsP9jRqaKrURXrOwHPAKsBm9ieUzJXAcf8g/faaBFJiw8/3y7ppaQ+7Gv5HyciItroL5Im2b6hd1HSJOCxQpmKkPQLYBmqPt7vsX2rpDs6WLhj+7LSGfrIt4DvS9pr6HdB0upUA72+XS5WzE+K94iIaKP9gR9IOhW4luqoxKbAB4D3lwxWwAPAysAKwETgVrp3vhsASTcyxt/d9oYNxinK9hcl7QVcLmnJevlx4BjbJxaMFvORM+8REdFKkl4B7EHVBk/AbOCkrk3SBJC0DLAD1bGZtYFlgW1sX100WMPq40Ojsn1nU1n6iaSlAGx36lOpQZXiPSIiokMkLU/1wOoMYBXbqxSOFIVIGgdMsP3n+noxYFdg3zyw2r9SvEdEROtIuoTRj0fY9lZN5ukXkiYC2H6gvl6tS7vNkh7j+b8XBv4MXAJ80vaDRYIVIGkG8DWqozK3Ap+jOuv+K+Bw29eVSxdjSfEeERGtI2njEZbfQNX3/X7bmzYcqRhV7XUOA/aiGs4oqo4zJ9r+Qsls/UDSBKrd5jfa3rFwnMZI+g2wne3bJG0EXAnMsH1u4WgxHyneIyKi1SRtCXwWWBw40vaPC0dqlKR9gbcDH7F9R722JnAy8BPbx5fM1y8kXWd7o9I5mjL87ztW3/foLyneIyKilSRtQ1W0zwWOsH1J4UhFSJoFbD10rrlnfSJwoe3JZZL1D0mLAtd2qduMpLuB43qW9uu9tn3cC/5Q9IW0ioyIiNaR9CuqtohHUx0HoD4aAEDHzvMuOrxwh+rce120doakd4+wPAGYDpzdcJzSTgGWGuM6+lR23iMionUkXcrYD6xObTBOUWMdB+ngUZFThy0ZeBC41PYFBSL1PUkH2z6qdI6YJ8V7REREi0l6lqqjyAtuAS+13and93hxuvYGbxDk2ExERLRS3c98T6ohTQZuohrSdH/RYA2zPa50hn4h6ctj3be9d1NZBohKB4jnW6R0gIiIiP/fJG1O1a8a4FvAd+rXV9f3ApB0V+kMDbu25+tdw66vLZirn+WIRp/JsZmIiGgdSb8EPmZ71rD11wFfs/36Msn6i6Q/dHXCqqRZ6bQzf/k59Z/svEdERBstPbxwB7B9Pemo0avLO3hd/ru/GGeVDhDPlzPvERHRRpI0wfbDwxaXo2MbV5L2G+0W8LIms0T/kHToGLdt+/D6xZENRYoFlOI9IiLa6HjgQkkHAEM93TcG/r2+1yVjfdJwQmMp+oCkx5i3476kpL8M3aIqWJcuk6yIkToQLQnsBvwTcHizcWJB5cx7RES0kqRtgYOous0AzAaOtv3Dcqn6i6RNbf9q/t8ZbSZpKeATwIeBM4Fju9aVaZCkeI+IiOgQSesCM4CdgEdtb1I4UnGSlgX2tH1E6SxNqo+R7Qe8DzgNOGH4UbPoP5069xcREd0gaXdJr+q5/oakRyX9WlLnBs5IWk3SpyTdAHwb2APYumuFu6RVJH1d0vmSdpO0pKRjgVuB5Uvna5Kko6naqT4GbGD7cyncB0N23iMionUk/QaYbPtpSTsD+wNvAyYDh9l+c9GADZL0C2AZ4AzgDNu3SrrD9hqFozVO0iXAZcCVwL8AW1Edp9rX9r0lszVN0nPAk8AzPL/zThfP/w+UPLAaERFt9Iztp+vX2wLfsv0gcJGk/yiYq4QHgJWBFYCJVLvMXd25W8725+rX/yvpPmBT208WzFSE7Zy+GFAp3iMioo2ek7Qi8DDV7mrvWeYlykQqw/Y0ScsAOwCfl7Q2sKykf7Z9deF4jZM0gWp3GeBeqq4z4wFsP1QsWCGSplA91G1gtu1LyyaK+cmxmYiIaJ2608zXgHHAD23vXq9vCRxk+x0l85UkaXmqB1ZnAKt0acKqpDnAc8wr3nvZ9prNJipH0krAOcBc4Fqqn8lGVG9ut7d9T8F4MYYU7xER0UqSXgIs1fsQXr3DKtt/ra+3tv3TUhlLqneg97T9xdJZonmSzgVm2v7msPVdgB1sTysSLOYrxXtERHSWpOtst7r7jKRVgM8CrwTOA06nGsDzb8D/2P5EwXiNk7QYVWvEoaMiNwGnd+3cu6RbbL/6xd6L8vKwQkREdNlIxyfa5lvAH4ETqQrWX1IV8ht2sHBfl6pYfwtwF3B3/Xq2pPVG/5OtNG6kRUmLjHYv+kN23iMiorM6svN+g+1JPdf3Aat2bacZQNLPgC8NPyol6a3Ap21PKZOseZKOB14G7GP78XptPHA8MNf23iXzxeiy8x4REdFykiZIWq6eqDnUYWXouktWGukZB9sXAa8okKekg4BHgTslXSvpWmAO8BfggJLBYmzZeY+IiM6SdI7td5fOsTClw8o8kn5HNU30yWHrLwVutP2qkf9ke0laAlib6vfjNtt/Kxwp5iPFe0REtFLdEnFPnv9g4ldt31c0WBQj6TPAG4C9bM+p11YHvgxcY/sLxcI1TNKYb1ptn9NUlnhxUrxHRETrSNqcqqvKN3l+D+sPAO+z/X/LpWuWpPfb/k79evPev7ukvWx/pVy65knai+rIyJL10uPAMbZPLJeqeZJOHeO2bX+osTDxoqR4j4iI1pH0S+BjtmcNW38d8DXbry+TrHm9D+UOf0C3Cw/sjkbSUgC2H6uvv2d7etlUEfOXB1YjIqKNlh5euAPYvh5YqkCekjTK65GuO8P2Y0OFe22zYmEKkLSfpA+PsP5xSfuUyBQLJsV7RES0keoJosMXl6N7/+3zKK9Huo7u+BDw7RHWv17fiz71ktIBIiIiFoLjgQslHQBcV69tDPx7fa9LXiPp11S77GvVr6mvO9NpBkDSaEeEBCzaZJY+YNtPjbD4pKTOfiIzCFK8R0RE69j+uqQ/AodTdZsBmA180fYPyyUr4rWlA/SRY8e499vGUvQJSSsM774kaYVSeWLB5IHViIiIiI6RtAuwN7A/z/906j+Ak2yfVipbjC3Fe0REtI6kQ8e4bduHNxamMEmP8fyz7aqvRfWzWLpIsAIkHWn7kPr11iNNW+0SSf8KfApYn+p3YjbwJds/LhosxpTiPSIiWkfS/iMsjwc+DPyT7Zc1HKkYSecBrwDOAc6wfVfhSMWM1TYzKvW02XfaPqt0lhhZzrxHRETr2P772ea6n/cngA8CZzD2uefWsb2dpGWAdwOn1MXZ96gK+YfKpot+IGkc8DZgJ2Ab4OdAivc+leI9IiJaqW4LuR/wPuA0YCPbD5dNVYbtR4FTJZ0GTAdOBF4KHFc0WPOWl7Qf1ZGhodd/Z7tTPw9JWwA7A+8ArgY2B9aw/beiwWJMKd4jIqJ1JB1NtdP8dWAD238tHKkoSW+k2lV9M3AFsL3tn5dNVcQpzBvS1fu6cyTdDdwFnAwcaPsxSXekcO9/OfMeERGtI+k54EngGUZ4WLNjD2nOAR6hOjJ0MdXP5O9sXzfCH+s0SQfbPqp0joVJ0gnAdsCNwOnATOBG253q/T+IUrxHRES0mKRLmfcGZqjLzBDbntp4qD7XlYdZ62FMU6g+lXk7sDTVQ90/6vqnVf0sxXtERLROfd59VHlQM8YiaZbtyaVzNEnSosC/UBXyb7P98sKRYhQp3iMionUk3cELd5mHuEtHAyRtCvzB9r319S7ADsCdwOfyRuaFurDzLunVtm8Z5d4Wti9vOlMsmBTvERHRKZJWsn1P6RxNkXQd8FbbD9XdRc4APg68Dnit7fcUDdiHurDzXj8X8m1gz+FHZLrw5mWQLVI6QERERMOuLB2gYeN6dtenA1+3/X3bnwXWLpirr0havOeyCz3OZwN3A9dJesOweyN9YhV9IsV7RER0TdcKk3GShlpDb0XVcWZIp1pGS/qTpA+Ocvvvb+psH9lQpJKetv1pYDfgO5IOlTRUF+ZYRh9L8R4REV3TtcLkf4DLJM0EnqCanomktYFHSwYrYC6wq6Sz66mzvbr2pg6A+mz7JsBrgJ9LWr1ooJivTr3jjoiIbpB0IiMX6QKWbThOUbaPkPQzYEXgQs972G0RqrPvXfIw8Bbg08AsSR+yfWl9r2tv6v7+ZsX2I8DOkj5A9eZuyWKpYr5SvEdERBtd8w/eax1JU21fXL9eA7gDwPbvJL0b6NSQpvrNyxclXQh8S9J5wGcKxyrhlOELtk+T9HPgoAJ5YgGl20xERLSapJdR1WyPl85SQm/nkOFdRLrWVWR4F5n6d+PLwIbARNurFQsXsYBy5j0iIlpJ0sck3UXVz/wuSXdK2qN0rgI0yuuRrttuVu+F7b/a/hDwJarnATpD0mOS/jLC12OS/lI6X4wux2YiIqJ1JH0GeCPwFtu312trAidIWs72F4sGbJZHeT3SdavVhTrw/E9kbJ8NnF0uWfNsL1U6Q/xjcmwmIiJaR9ItwCTbc4etLwHcYHudMsmaJ+kR4HKqXfY316+pr99ke0KpbCXUn758ChhP9TN4DPh3218tGixiAWXnPSIiWml44V6vPVFPluySaT2vjxl2b/h1q+UTmXkkPUb1yUvv0SlT1YaL2U6N2KfyP0xERLTR3ZK2sv2z3kVJU4E/FcpUhO3LFuT7JH3f9g4LO09h/8awT2Rs3y7pvcANQGeK9+HHZiQtBewBfBQ4t0ioWCAp3iMioo32BmZKugK4lmpHcVNgc56/Ex3zrFk6QBPyiczzSVoW2AfYBTgd2NT2g2VTxVjSbSYiIlrH9mxgfarz3atTFaaXA+vX9+KFuvAQ3N2Sthq+2MVPZCS9XNJRVH3+nwEm2/5MCvf+lwdWIyIiohM93yWtB8wERvxEpktv7CQ9DjwAnEr10O7z2D6u8VCxQHJsJiIiWqfnYbwX3KJqD7h0w5EGQet7vtueLWl9YGdgPaq/8+XAR0c6TtNyRzPv35HhbSOzs9vHsvMeERGtU4+8fwVwDvA923cWjtR3JK0CzLB9dH39NtsXFo5VhKRxVD+L75bO0g8kbWr7V6VzxMhy5j0iIlrH9nbANlTHAr4u6TJJe0harnC0oupzzh+TdDlwKbDC0L0uFO6SlpZ0sKSvSNpalb2A24H3ls5XkqR1JX1B0q3AyaXzxOiy8x4REa0maRFgOnAicGTXzvLWLQC3pzoqsg5VG8DptlcuGqwASTOBh4Erga2ACcBiwCdsX18yWwmSVgN2qr+eAVYDNrE9p2SuGFuK94iIaCVJb6QqSt5M9YDi92z/vGyq5kl6Arga+AxwhW1Lut12J1pD9pJ0o+0N6tfjgD8Dq9p+wQObbSfpF8AywBnAGbZvlXSH7TUKR4v5yLGZiIhoHUlzgK8C9wAfAb4BPC5pI0mt7qgygkOAl1IdhThY0lqF85T09NAL288Cd3SxcK89QPWg6grAxHotO7oDIDvvERHROpIuZV4h8oIR8LanNh6qMElrUn0SMQN4FXAYcK7t3xUN1iBJzwKPD10CSwB/o6NdiCQtA+xA9XuxNrAssI3tq4sGizGleI+IiM6StLXtn5bO0TRJG1AVbNNtd3knPmqSVqB6NmQGsIrtVQpHilGkeI+IiM7qwmCisUg61vb+pXOUJmlZYE/bR5TO0g8krZb2qv0rZ94jIqLLWj+YaD52LB2gSZJWkfR1SedL2k3SkpKOBW4Fli+dr0mS3iRpl57rsyVdLOliIJ/G9LFMWI2IiC7r+sfPXXvz8i3gMuD7wL8AvwRmAxvYvrdksAI+D3y85/rVwK7AeKqHnC8ukCkWQIr3iIiIFhtjMJXoXvG+nO3P1a//V9J9wKa2nyyYqZSlbd/Uc32r7WsBJB1VKFMsgBTvERHRKZJeb/uq+nJOySwNuZYXdtwZ8lTDWYqTNIF5P4t7gSUljQew/VCxYM1btvfC9rt7Llcg+lYeWI2IiE6RdJftVUvn6DeS1rM9u3SOhanu//8cI7+RcZcGV0n6IfBfti8Ytr4t8DHb7yiTLOYnxXtERHSKpD+kDd4Ldb3zTtdIWhu4APgFcF29vDHwRmDbLvX/HzTpNhMREV2TXauRde38OwCS1pL0aUm/KZ2lSbZvAzYEfg6sXn9dDmyYwr2/5cx7RES0Tn0kYKQiXcA/NRxnUHTmTY2kFakGEu1MVcAeRTW0qlPqB3W/0bsmaZyk99n+bqFYMR85NhMREa0jacux7tu+rKksg6ILx2Yk7U5VpK8MnFl/zbS9RtFgBUhaGtgTWAmYCVxUXx8IXG97WsF4MYYU7xER0RmSVgFm2D66dJZ+I+mXtt9QOsfCJOkp4Epgf9vX1Gu3d+lB1SGSZgIPU/08tgImAIsBn7B9fclsMbYcm4mIiFaT9HKqSaI7Ue0ynls2UXmS1qL6ecywvT5A2wv32iupfheOk7QC1c77omUjFbOm7Q0AJP0f4M/AqrYfKxsr5icPrEZEROtIWkrSLpJ+AlwNrE1VrKxl+4DC8YqQtKKkfSRdTTVVdBwdO+dt+8+2T7a9BdVu86PA/ZJulnRk4XhNe3rohe1ngTtSuA+GHJuJiIjWkfQEVdH+GeAK2+7w8Yic854PSa+m+hTi8/X11rZ/WjjWQiXpWeBx5nUZWgL4W31t20uXyhZjS/EeERGtI2lfYAYwHjgd+B7w044W7znn/SJ14eHdGFwp3iMiorUkrUl9tht4FXAYcG6X+lgPO/M/dM571wyqGp2kWbYnl87RBElTgPWoWoXOtn1p2UQxPyneIyKiEyRtQNXX+7221yqdpwRJK1O9kdkJWJLqjcwhZVP1ny7svEtaCTgHmAtcS3VcZiOq4zPb276nYLwYQ4r3iIiIDpK0DnCw7Q+WztJvOlK8n0v17MM3h63vAuyQPu/9K8V7RES0jqTHGH3CaucexpO0GVWbzMtt3y9pQ+BTwJtzfKYiaVHbT9evz7H97tKZFiZJt9h+9Yu9F+WlVWRERLSO7aVsLz3C11IdLNyPBr4B7ABcIOkw4KfAVVTPAXSWKlPrPud3D623vXCvjRtpUdIio92L/pCd94iI6AxJywJ72j6idJamSLoJ2Mj2XEkTgD8CG9q+tXC0YiS9nur5h+2B5YA9gR/YfrhosAZJOh54GbCP7cfrtfHA8cBc23uXzBejy857RES0jqRVJH1d0vmSdpO0pKRjgVuB5Uvna9gTtucC1MXpLV0t3CUdIelW4EjgRmAy8IDt07pUuNcOohpSdaekayVdA8wB/gJ0cpDZoMjOe0REtI6kS4DLqPqb/wvVNM3ZwL627y2ZrWmSHgEu71naovfa9rsaD1WIpAeAW4D/BM6vP43odM97SUtQTSAWcJvtvw273/qBVYMmxXtERLSOpBtsT+q5vg9Y1faTBWMVIWnLse7bvqypLKVJGge8japV5lTgEuCtwCq2nymZrV91ofPOoHlJ6QARERELQ32+e2j0+73AkvWZXmw/VCxY82bZ/stINySt2nSYwlay/WPgx5JeCmxL1e/+Hkk/s71z2Xh9SfP/lmhSdt4jIqJ1JM0BnmPkwsNdOibRu3NaF6hbjXSvC0b7+0pammow0WkFYvW1rv2ODILsvEdERBttafvO0iH6RO8bmOXGuNcFI/59608mUrjHQEjxHhERbXQu1aj3eP6wquEft3ft4/eVJH15tJtpj1jpHVhF1YEm+kiK94iIaKOu7SiPZXlJ+1H9TIZeU19PLBeriCeAa0uH6EeSBEyh6n//TmAF6MzAqoGSM+8REdE6ku4Hzhjtfpd2WOuJqqOy/fmmspSW89svlIFVgyc77xER0UbZYa11qThfAE+VDtAvJB0BvBe4C/gf4AvANXlot/9l5z0iIlonO6zzSPoP4Hbb/zVsfV/gFbY/WSZZ8yStDjxs+9H6egqwHXAn8BXbnSnuM7BqcC1SOkBERMRC0JkibAFsC3x9hPUTgHc0nKW07wHjASS9DjiLaud5EvDVgrlKeAVwBPAu4DZJ3waWkJRTGX0u/wNFREQbzZC0THZYgaqv/XMjLD5XP6TYJUvY/mP9+v3AN2wfK2kR4PqCuUrIwKoBlZ33iIhoo+ywzvM3Sa8avlivPVEgT0m9b1amAj+D6o1MmThFnTf0wvZc22fb3gF4FfC/5WLF/GTnPSIi2ig7rPMcSrW7+kXmPcS7CXAwsE+xVGVcLOlM4E/ABOBiAEkr0r2jVhlYNaBSvEdERBsN32E9GP5+VKRMokJs/1jSdsCBwMfr5dnADrZvLJesiH2A6cCKwJt6BhG9AjikWKoyMrBqQKV4j4iINsoOaw/bvwE+IOll1aUfL52pBFct9kbq/z8emAZc2GyiotJOdUCleI+IiDYaa4f108VSFSJpD+BTzHsO4K/Av9vu2vn/v6ufhdiZqtf5HcD3yyZq3IPp6T6YUrxHRETrjLbDantWgThFSfoM8EbgLbZvr9fWBE6QtJztLxYN2CBJ6wAzgJ2AB6kebJbtKUWDldG5T6DaIkOaIiKidSQ9BvT+B87An4FLgE/afrBIsAIk3QJMsj132PoSwA221ymTrHmSngN+DnzY9m31WicHE2Vg1eBKq8iIiGgd20vZXrrnaxmqDiuzgf+azx9vneGFe732BNC1Fok7APcCl0g6RdJWjNJ1pQPSTnVApXiPiIhOsP2w7eOBtUpnadjddZH6PJKmUj3Q2xm2z7U9HXgNcCmwL7CCpJMlva1ouOaN2E4V+CDwz+VixfzkzHtERHSGpEXp3n/79gZmSrqCqruIgU2Bzak6rHSKpInAasAFtr8raTlgR6oHervUbSbtVAdUzrxHRETrSHr3CMsTqDrQXGH7Cw1HKkrSS6k6q6xHVbTNBr470nGaNpO0G3Ak8HtgDeAjtn9QNlUZkk6g6sb0J+BdwDq2n67bqf7Q9iZFA8aoUrxHRETrSDp12JKpuotcavuCApH6jqRxwAzb3y2dpSmSfgNMsf1A3XHnu7Y3K52rBFXb60PtVM+0fU+9PhmYaLtLn0IMlK59dBgRER1g+4OlM/QLSUsDewIrATOBi+rrA4Hrgc4U78BTth8AsH27pMVLByolA6sGV4r3iIhopbr13V5UDycC3EzVAu/SYqHK+DbwMHAlsDtwELAYMM329SWDFbCypC+Pdm177wKZisvAqsGSYzMREdE6kt4BfAX4AnAd1TnvjYDPAHvZ/lHBeI2SdKPtDerX46j63a9q+7GyyZon6QNj3e/SxNFRBlYdYHu1osFivlK8R0RE60i6FPiE7RuGrW8InGh7yyLBCpB0ne2NRruOF5J0ou2Pl86xMGVg1eDKsZmIiGijVwwv3AFs/1rSCiUCFTRJ0l/q1wKWqK9FdfR56XLR+tbmpQM0YAeqnfdLJP2E6vx7ekQOgBTvERHRRo//g/dax/a40hmi/9g+FzhX0nhgO3oGVgHnpttM/8qxmYiIaB1JjwCXj3QLeJPtCQ1H6juSlgX2tH1E6Sz9pitHi3oGVt1m+5GegVXTbU8tmy5Gk+I9IiJaR9KYZ9ptX9ZUltIkrQJ8FnglcB5wOnA4sAtwuu1PFIzXlyTNsj25dI6FKQOrBleK94iIiBaTdAlwGVWryH8BtqKasLqv7XtLZmuapPfaPnMBvm9X299sIFIxGVg1uFK8R0RE69QF62j/gbPtrZrMU5KkG2xP6rm+j6pV5JMFYxUh6Xyq5/32sH176TwlpQvR4MoDqxER0UYHjLD2BqoBRfc3nKU4SROY10nkXmDJ+kFFbD9ULFjDbG8raTvgAkmnAycDz/Xc78zPggysGljZeY+IiFarz79/FlgcONL2jwtHapSkOVQF6khtAN3Fvt6SJlE90Pww8z6h6dTPIgOrBleK94iIaCVJ21AV7XOBI2xfUjhSFCZpcaopu+8BDrR9fuFIfa8LA6sGTY7NRERE60j6FTBTSWCQAAAgAElEQVQROJrqQU0k/f08r+3rCkXrC5LWohrQs5Pt9UvnadCvge8DG9l+onSYAdGFgVUDJTvvERHROpIuZewHVjvXw1rSisB0YGdgQ+Ao4BzbNxYN1iBJ69q+aQG+L7vNtTzI2n9SvEdERLSYpN2BnYCVgTPrr5m21ygarI+lYJ0nP4v+k2MzERHROpLePdZ92+c0laUPnER1dGhn29cASMrOXSyokR50joJSvEdERBu9c4x7BrpUvL+SauT9cZJWoNp5X7RspChtQQdWAScs9DDxouTYTEREREdIWpn6QVVgSeBc24eUTdV/JM2yPbl0joUpA6sG1yKlA0RERCwMktaXdJqkayT9qn69QelcJdm+2/YxtjcGtgP+PmVV0tblkpUjaYKk4UdDWr/bbHtb4L+oBlZ9VtLLJS039FU6X4wuO+8REdE6kqYBx1B1VLmG6tzuxsDBwAG2ZxaM15e68GCipEOBM23/tu75/hNgEvAM1TMBFxUNWEAGVg2eFO8REdE6km4AptmeM2x9dapOK5MKxOprHTkqMhtY37YlfYTq+NBbgXWA02z/c9GADcrAqsGVYzMREdFGiw4v3AHqtTysObIu7OY95Xm7ltsAZ9h+1vbNdK+Jx6+BcVQDq1K4D5AU7xER0UZPS1p1+KKk1aiOSEQ3PVk/CzERmAJc2HNvyUKZStne9iHzmzQr6cSmAsWC6dq7zIiI6IbDgIskHQlcS7WrvCnwKeCTJYP1E0mL2n66vpxTMktDPgGcDUwEjrd9B4CktwOzSgZr2oJMmq1tvlCDxIuWM+8REdFK9YN4+wPrUT2w+hvgWNs3FA1WWN1ZZQqwM/BO2ysUjhR9rAsPMg+aFO8REdEpklazfWfpHE2T9Hqqgn17YDlgT+AHth8uGqxhktYHDqR6U2fgJuAY2zcWDdanUrz3n5x5j4iIVpK0maT3SFq+vt5Q0unAFYWjNUrSEZJuBY4EbgQmAw/YPq2Dhfs04FzgMuBDwG7163Pqe/FCw3vgR2HZeY+IiNaRdDSwLXA9sDZwPrAHVQH7NdtzC8ZrlKQHgFuA/wTOtz1X0u1d7OOdFqJjkzQBeKSnIw+SdrX9zXKpYrgU7xER0TqSbqJqgTe3Lkj+CGxo+9bC0RonaRzwNqqe5lOBS6h6m69iu1OddyTdZHvdF3uvjTKwanDl2ExERLTRE0O76/XRkFu6WLjXVrL9Y9u7UH0KMRP4BXBPfYyoS9JCdJ7pVJ/IAHyg/udEYEuqT6iiT6VVZEREtNFakn7Qc71677XtdxXIVMp5wEYA9Ruas4GzJS1N9fBql6SF6DwjDqwCbpaU+rCP5dhMRES0jqQtx7pv+7KmspQmaZbtyaVz9IsRWojOpuo206kWopJ+SfXA7n1UO/Ab9/S9/63t15TMF6NL8R4REdFiku4Hzhjtvu29G4wTfaJuHXoa1VGZ/7R9eL3+duDfbO9UMl+MLsV7RES0Tt32b2XbJ9XXV1EVKQAH2T67WLiGSboTOHS0+7ZPazBOUZJOpToqMxLb/nCTeSL+ETnTFBERbXQQMKPnenGqs83jgVOpzn13xYNdKtDn4/wR1lYF9gHGNZyluAysGkwp3iMioo0Ws/2HnusrbD8IPChpfKlQhTxVOkC/sP39odeS1gQOAbYAvgT8d6lcJdSfTh0DHAUcS3X+f2OqgVUH2J5ZMl+MLsdmIiKidSTdZnvtUe793vZaTWcqpR5A9LDtR+vrKcB2wJ3AV2x3qriX9Frg01STZo8GvtO1fveQgVWDLH3eIyKija6StPvwRUkfBa4ukKek71EdF0LS64CzgLuoBvJ8tWCuxkk6C/gRcCXwFuAHwNKSlpO0XMlsBSw6vHAHqNcWbTxNLLDsvEdEROtIWp6qv/mTwHX18sZUZ9+3s31fqWxNk/Rr2xvWr48BnrN9kKRFgOuH7nWBpDnMe2B16J8aura9ZuOhCql33t9p+65h66sBP+zS78WgyZn3iIhoHdv3A2+UNJXqYTyAC2xfXDBWKep5PRU4GMD2c5JG/hMtZXv10hn6SAZWDajsvEdERCdIWgvYCZhhe/3SeZoi6QRgReBPwLuAdWw/LWlFqh3WTYoGLKz+vZgB7NSl3wvIwKpBleI9IiJaqy5QpwM7AxtSddY4p0ut8FRtr0+nKuDPtH1PvT4ZmGj7wpL5SsjvRQyyFO8REdE69cOqOwErA2fWXzNtr1E0WB+R9Caq3eY9S2dpSn4v5snAqsGVM+8REdFGJ1F1FNnZ9jUAkjq/W1V3m9kZeC9wB/D9sf9E6+T3Yp4MrBpQKd4jIqKNXgnsCBwnaQWqHdZOtr+TtA71mW7gQarWkbI9pWiwMvJ7UcvAqsGVYzMREdFqklZmXvG6JHCu7UPKpmqOpOeAnwMftn1bvXZ7l9oijqTrvxeQgVWDKkOaIiKi1WzfbfsY2xtTTRZ9cuiepK3LJWvMDsC9wCWSTpG0Fc9vH9lJw34vplE90NsZGVg1uLLzHhERnSXpOtsblc7RBEnjqd687ETV7/00qt3mTnWbkbQZsBJwue37JW1I1dv8zbZXKZuuORlYNbhSvEdERGdJmmV7cukcC5ukicBqwG22H6l3VncEptueWjZdcyQdDWwLXA+sTfXQ5h7AkcDXbM8tGC9igaR4j4iIzurCzruk3aiK098DawAfsf2DsqnKkHQTsJHtuZImAH8ENrR9a+FofaHLA6sGSc68R0REtNs+wHq2NwPeCBxcOE9JTwztrtt+GLil64W7pBUl7SPpaqoJqy+hOloVfSqtIiMiolMkLWr76fpyTsksDXnK9gMAtm+XtHjpQAWtJan3U4fVe69tv6tApiJGGFi1G9XAqs8XDRbzlWMzERHRepIETKEaUPRO2ysUjtQYSfcDZ/Qszei9tr1346EKkbTlWPdtX9ZUltIkPUXVaWb/noFVnW8hOgiy8x4REa0l6fVUBfv2wHLAnsCBRUM1b/jf99oiKfpAl4rzBZCBVQMqO+8REdE6ko4A3gvcBfwPcC5wje01igbrY5JOtP3x0jkWJknTgJVtn1RfXwVMrG8fZPvsYuEKysCqwZIHViMioo0+AtwHnEw1NfJB5vWyjpFtXjpAAw6iGkY0ZHFgU6ohRR8rEagfdH1g1aDJsZmIiGijVwBvo9pJ/E9JlwBLSHpJxr932mK2/9BzfUX9xu7BeohVp4w1sKpsshhLdt4jIqKNVrL9Y9u7UA3jmQn8ArhH0ullo0VBE3ovbO/VczmRDqkHVn0D2AG4QNJhwE+Bq4BXlcwWY8vOe0REtNF5wEYAdV/vs4GzJS1N9fBqvJBKB2jAVZJ2t31K76KkjwJXF8pUyjuAyRlYNXhSvEdERBuNWIja/gtwWsNZipL0XttnLsC3nrDQw5S3L3CepJ2B6+q1janOvm9XLFUZzxtYJanzA6sGRbrNRERE64zQ2/x5Otbb/Hyqzbo9bN9eOk8/kDQVWK++nG374mH3J9QTWFtL0iPA5T1LW/Red2lg1aBJ8R4REa0j6U7g0NHu2+7a7vt2wFHA6VQdeJ4bumf7oVK5+pWk62xvVDrHwpSBVYMrxXtERLROF4qvF0vSJKqd1YeZ1zbTmaj5QpJm2Z5cOkfESNJtJiIi2uip0gH6haTFJR1OdYzofbZXt71G/ZXCfWSt39mUNE3Snj3XV0m6vf56T8lsMbYU7xER0UYzJC0zdCFpiqQTJO0nabGSwQr4NTAO2Mj2+aXDRN/IwKoBleI9IiLa6HvAeABJrwPOAu4CJgFfLZirhO1tH2L7ibG+SdKJTQUaAF1omzniwCrbd1H/uxP9Ka0iIyKijZaw/cf69fuBb9g+VtIiwPUFczXO9k0L+K2bL9Qgg2Wr0gEakIFVAyo77xER0Ua9O6dTgZ8B2H5u5G+PLpN0c/21F3SmA89VknYfvtjRgVUDJTvvERHRRhdLOhP4E9UO48UAklYkD7PGMLZfK+mfgDeUztKgDKwaUGkVGRERrSNJwHRgReBM2/fU65OBibYvLJmvH3WhPaKkbWz/7yj3drR9VtOZSsvAqsGT4j0iIjpD0puAnWzvOd9vbjFJE4BH3FMESNrV9jfLpVr4JD1L1ev+/UNv6HruZTbACPJz6T858x4REa0m6XWS/kPSHOBw4ObCkRol6VBJr6lfLy7pEuD3wH2S3jr0fW0v3Gu/ppoy+0tJOw6714UOM/+I/Fz6TIr3iIhoHUnr1EXrzcBXgD9Qfdo8xfZXCsdr2nTglvr1B+p/TgS2BI4skqgc2z6FqpvMQZJOlbTk0L2CufpZfi59JsV7RES00W+pCrR32n6T7ROBZwtnKuWpnuMx2wBn2H7W9s10tHGF7d8BmwH3AbMkvb5wpIgFluI9IiLaaAfgXuASSadI2orufvz/pKT1JU0EpgC9D+suOcqfaau//w7Yfsb2p4CPAv8DvKpYqv7W1X9v+laK94iIaB3b59qeDrwGuJSqLd4Kkk6W9Lai4Zr3CeBsqk8jjrd9B4CktwOzSgYr4PPDF2xfStUi8YjG0wyGLgysGijpNhMREa1U7zSvBtxm+xFJywE7AtNtTy2bLkqSNIWqPaKBm2xfUjhS36ifEwE4qYPPhwyEFO8REdE6knajehjz98AawEds/6BsqnIkrQ8cSE/BChxj+8aiwRomaSXgHGAucC3VkZCNgCWA7Ye3j+yqoYFVti8onSVeKMV7RES0jqTfAFNsPyBpTeC7tjcrnasESdOAY4CjgGuoCtaNgYOBA2zPLBivUZLOBWYOb4spaRdgB9vTigQrIAOrBleK94iIaJ3hg2W6PGhG0g3ANNtzhq2vTlXITioQqwhJt9h+9Yu910YZWDW4OtkiKiIiWm9lSV8e7dr23gUylbLo8MIdwPYcSYsWyFPSuJEWJS0y2r0W6x1Ytd+wnfZ0mOljKd4jIqKNDhx2fW2RFP3haUmr2r6rd1HSasAzhTKV8kNJpwD72H4cQNJ44HjgR0WTNc+2T5F0GfDduvvQnrb/RgYz9bUU7xER0Tq2T1uQ75N0ou2PL+w8hR0GXCTpSKo3MQY2BT4FfLJksAIOojr7f6ekO6l+FqsBpwGHlAxWiu3fSdoM+CLVwKpdSmeKseXMe0REdFZXzvZKmgTsT9VtRsBsqm4zNxQNVoikJYC1qX4Wt9W7zZ0iaZbtycPW3gJ8A5hoe6kiwWK+UrxHRERndaV4j7FJ2ho4yPbWpbM0RdJ2ts8bYX0C8FHbXyoQKxZAiveIiOisLhTvkk5l9DPMtv3hJvOUJGkq8F/AK4HzqGYBfItqB/4I2+cUjFdEBlYNnhTvERHRWSMdHWgbSTuMsLwqsA8wzvbKDUcqRtIsYF/gSuBfqQr3z9o+oWiwAjKwanCleI+IiNaR9F7bZy7A9+06fGBPm9UDqw4BtqDqsPLftp8qm6o5I/T//73ttUpmKiUDqwZXiveIiGgdSedTdVTbw/btpfOUJum1wKeBycDRwHdsd61NJJJuBw7oWTqm97pLx2YysGpwpXiPiIhWkrQdVVvA04GTgeeG7tl+qFSupkk6C9iEqlA9E3i2937HfhanjnHbtj/UWJjCJN1me+0R1hcBfjfSvegPKd4jIqK16haJlwMPM++hTdtes1yqZkmaQ8/ffWh56LpLP4uYR9LxwMsYeWDV3I5NIR4oKd4jIqJ1JC0OfAZ4D3Cg7fMLR4o+IWkcMMH2n+vrxYBdgX1tv7ZktiZJWpTqk6ldgRcMrOrSsxCDJsV7RES0jqRbgO8Dh9t+onSefiNpLWAGsJPt9UvnaYqkGcDXgMeBW4HPAd8GfkX1u3JduXRlZGDV4EnxHhERrSNpXds3LcD3nWj7401kKk3SisB0YGdgQ6pd13Ns31g0WIMk/QbYzvZtkjaiahk5w/a5haP1jS4OrBo0i5QOEBER8f/bghTutc0XapA+IGl3SRcDlwEvB3YD/mT7810q3GtP2b4NoN5lv6OrhbukqZJ+J+mvkr4jaV1J1wBfonrAO/rUS0oHiIiIiIXqJKod5p1tXwMgqasfuy8vab+e65f1Xts+rkCmUo4FPsK8gVW/pKMDqwZNiveIiIh2eyWwI3CcpBWo2kUuWjZSMacAS41y3bU3NLZ9af36PEkPpHAfDCneIyKiyzT/bxlsdVeVk4GTJa1M9aDq/ZJuBs61fUjRgA2y/fnR7knatMksfWBZSe/uuVbvdZcGVg2aPLAaERGdIGkC8Ih7/sMnadfh4+G7QtI6wMG2P1g6SymS1qXuugM8anuTwpEak4FVgyvFe0REtI6kQ4Ezbf+27vn+E2AS8AzV2e+LigZsmKTNgJWAy23fL2lD4FPAm22vUjZdsyStRlWs70T1+7AasIntOSVzRSyodJuJiIg2mg7cUr/+QP3PicCWwJFFEhUi6WjgG8AOwAWSDgN+ClwFvKpktqZJ+gXwI6oz/++xvTHwWFcLd0njJL2853oxSR+pj1RFn8qZ94iIaKOneo7HbAOcYftZ4GZJXftv3zuAybbn1keH/ghsaPvWwrlKeABYGViB6s3crXTvQVXg+QOrJA0fWPW+gtFiPrr2f2AREdENT0paH7gPmAIc0HNvyTKRinnC9lwA2w9LuqWjhTu2p0lahupTiM9LWpvqwc1/tn114XhN+wywcQZWDZ6ceY+IiNaR9HrgNKrd1f+0fXi9/nbg32zvVDJfkyQ9Alzes7RF77XtdzUeqk9IWp7qiNVOwCpdOv8v6TrbG/Vc/9b2a0pmigWT4j0iIqLFJG051n3blzWVpZ9JWs32nfXrE21/vHSmhUnS3UDvUKr9eq87NrBqoKR4j4iIVqqPzRwIrEd1rvkm4BjbNxYNFn1v+K50G9UPLo/Gtr/QWJh4UXLmPSIiWkfSNOAY4CiqMfACNgbOkXSA7Zkl8zWp/lmsbPuk+voqquNEAAfZPrtYuCgmA6sGV3beIyKidSTdAEwb3gJQ0urATNuTCsQqQtL/pXoQ8Q/19fXAVsB44FTbW5XM14+6sPM+XJcHVg2a7LxHREQbLTpS727bcyQtWiBPSYsNFe61K2w/CDwoaXypUH1OpQM0IQOrBlOGNEVERBs9LWnV4Yt1sfJMgTwlTei9sL1Xz+VEOk7SBEnDi/UTioRpUAZWDa4U7xER0UaHARdJ2lXSBpLWl/RB4ELg0MLZmnaVpN2HL0r6KNCp3uaSDpX0mvr14pIuAX4P3CfprUPfZ/ubhSI26QFgKeYNrIKODqwaNDnzHhERrSRpErA/VbcZAbOpus3cUDRYw+pe5ucBTwLX1csbA4sD29m+r1S2pkmaDaxv25I+QnVc5K3AOsBptv+5aMCG9Qys2glYG1gW2KaDA6sGSor3iIiIDpA0leqNDMBs2xcPuz/B9sPNJ2uOpFm2J9evvw9caPtr9XXnHlLt1eWBVYMmxXtERLSOpFMZ/QiAbX+4yTyDoAvFq6RfArsB9wG3ABvbvqO+lwmjta4NrBo06TYTERFtdP4Ia6sC+wDjGs4yKLrQYeUTwNlUZ7yP7ync3w7MKhmsnwwV7rXNiwWJEWXnPSIiWk3SmsAhwBbA8cB/236qbKr+04Wd93jx8nvRf9JtJiIiWknSayV9B/ghcAWwru2TU7h3W9156DRJ10j6Vf16g9K5IhZUiveIiGgdSWdR9bC+EngL8ANgaUnLSVquZLY+1vpjM5KmAecClwEfojr/fhlwTn0vXqj1vxeDJsdmIiKidSTNYd4Dq0P/HCpCbHvNxkP1OUnL2X6odI6FSdINwLThg4gkrQ7MtD2pQKy+IWkC8Ih7ikNJu3ak7/3ASPEeERHRQZJurl+eZPsrRcM0RNJNttd9sffaSNKhwJm2fytpceAnwCSqCcQ7276oaMAYVY7NREREJ0haS9KnJf2mdJZ+YPu1wJuAO0pnadDTklYdvihpNaqitUumU7XLBPhA/c+JwJbAkUUSxQJJ8R4REa0laUVJ+0i6mmrC6kuohtB0hqRtxrg91fYFjYUp7zDgIkm7Stqgfnj1g8CFwKGFszXtqZ7jMdsAZ9h+1vbNpJV4X8uxmYiIaB1Ju1MV6SsDZ9ZfM22vUTRYAZKeBS4H3m/7nmH3OtcGUNIkYH+qabMCfgMca/uGosEaloFVgyvvrCIioo1Oouo0s7PtawAkdXW36tfA6cAvJe1n+6yee53qJCLpSNuHALuUztIHMrBqQGXnPSIiWkfSy4EdqXbfV6Daed/V9ipFgxUwtLsuaR3gu1Q7zXva/lvXdt679veNdsqZ94iIaB3bf64HMm0BbAU8Ctwv6WZJnXwYz/bvgM2ojknMkvT6wpFKGCdpwlC//+FfpcM1LQOrBlN23iMiojPq3eeDbX+wdJamSJple/KwtbcA3wAm2l6qSLACJD0J3MPIx4U61f+/Hkp1DHAUcA3Vz2Rj4GDgANszC8aLMaR4j4iIVpK0GbAScLnt+yVtCHwKeHOXjs9I2s72eSOsTwA+avtLBWIVMdIbma7KwKrBleI9IiJaR9LRwLbA9cDawPnAHlT9q79me27BeEVImkLVYcXATbYvKRypcSne58nAqsGVbjMREdFG7wAm255b7zD/EdjQ9q2FczVO0krAOcBc4Fqq4xHvlfTvwPbD20e23AmlA/SRpyWtavuu3sWODqwaKCneIyKijZ4Y2l23/bCkW7pYuNe+Apxs+5u9i5J2Ab4KTCsRqpAtJW0xyj3b/nCjacoaGlh1JNWbOgObUh0t+2TJYDG2HJuJiIjWkfQI1WCiIVv0Xtt+V+OhCqnfuLz6xd5rI0k7jLC8KrAPMM72yg1HKioDqwZTiveIiGgdSVuOdd/2ZU1lKU3SbbbXHmF9EeB3I93rAklrAodQvbE7Hvhv20+VTdWcnoFVMWBSvEdERLSYpOOBlwH72H68XhtPVbDOtb13yXxNk/Ra4NPAZOBo4Du2O3fGOwOrBleGNEVEROtImiZpz57rqyTdXn+9p2S2Ag6iGlJ1p6RrJV0DzAH+AhxQMljTJJ0F/Ai4EngL8ANg6Y4OacrAqgGVnfeIiGgdSf8XmGH7D/X19VSTVscDp9reqmS+EiQtQdU2U8Bttv9fe/cea1lZ3nH8+4MgKuWmRUwKDB0MBSRBbk0L9cKgpRIIA6MyQ4m10qJpMQpqtbQxtTXUWC4x2FCDFonaDCoMRGssrVwKUWsVBCygjjBQSbQUikGwIPj0j7VHDodzps6ccb17r/X9JJOz1rtmJ7/MH5Nnv+dZ7/No40i9S7KB7sVM5vzcOLBpbEOaHFg1ozxtRpI0RM/aWLhP3FhVDwAPTFpGRqeqfgzctvE+yauAP6mqV7VL1a+q2rt1hilyu2fezybbZiRJQ7Tr3JuqOmPO7W49Z2kqyYok307yoySfSHLApHXm/cBFrfP1Kcmpc66PnPfsjGd+Qpo+Fu+SpCH6tyR/OH8xyZuArzbI09J5wOnA84HPAF8BPl5Vh1bVFU2T9e+sOdcXznv2xj6DTAEHVs0o22YkSUN0JnBlklOAmyZrhwLbAyubpWqjquq6yfWVSe6vqrEWblnkeqH7oXNg1YyyeJckDU5V/RdwRJIVdANoAP6xqq6Z+/eS7FpV/9N7wH7tkuSkOfeZez+y3fda5Hqh+6H73AJrPxtY1XMWbQZPm5EkjdYYzrpOcskmHldVjaZdJMmjwHq6XfZ9JtdM7pdX1ShfZh77wKpZ4867JGnMBt8qUVW/3zrDFNm/dYBpssDAqjePcWDVrLF4lySN2Sh+/ZxkW2DXqvrvyf2zgDcAZ1bVaAraqrqndYZpMRlYdRhwLt07Ik/SDawCoKoebJdOm2LbjCRptEbSNrMa+DDwCPAd4C+AjwP/DvxVVd20+KeHJcnDPP0LWyb3oWsh2qlJsAYcWDW73HmXJI3Z4NtmgD8HDq2q9UkOAb5MN312XeNcLXwReCFwBbC2qu5tnKcZB1bNLs95lySN2dGtA/Tg8apaDzDZZb97pIU7VbUSOAa4H7g4yfVJ/ijJ8xpH650Dq2aXbTOSpNFIcsfk8m+r6kNNw/QkyfeA8+csnTX3vqrOf8aHRiDJNsDJdMOazhnbv8PclrH57WNjaCebZbbNSJJGo6r2T/J84DdaZ+nRxcCOi9yPbgcvyRHAGuClwI3AiVV1Q9tUTTiwakZZvEuSBifJMVX1T4s8XlFVn+41UENV9d7FniU5vM8srU1e0nwIWAucDjwxWT8EftZWNBYOrJpRts1IkgYnyZPAvwKnVtV9856NuiUgyQHAarrd5x9W1WGNI/UmyXUsXphWVa3oMU5TDqyaXe68S5KG6FbgH4CvJDlr3k776FoCkiyjK9bX0O02LwMOq6oNLXP1rape0TrDFBnN+f5DY/EuSRqiqqqLk1wPfDLJscAfV9WjjKwlIMmXgJ3pWkVeU1XfSXL32Ap3gCQnbep5VV3RV5bWHFg1uyzeJUmDVVXfTvKbwPuAm5O8vnWmBu4H9gB2B3ajG9Q0qi8wcxy/iWdFd/77KDiwanbZ8y5JGpwkN1fVwfPWXgH8PbBbVe244AcHKsnOwCq6tpkXAbsAx1TVV5sGmyJJVlXV5a1z9CXJlTiwaiZZvEuSBifJyqq6coH1XYE3VdX7G8SaCkleQHe++Rpgz6ras3GkqZDk3qraq3WOPk2+1J1E9wLzs4HL6Ar5B5sG0yZZvEuSBivJUcCL6doBbq+qaxtHmipJlm3sfU5yYVW9pXWmVpL851i/yIx9YNWssXiXJA1Okl+hawf4X+DrdH28hwDPoRvKc98mPj5KHqE5yp33+QOrLhvpwKqZYvEuSRqcJOuAq6rqY/PWXw+sqqoTmgSbYmMo3pPcxsIv6wbYt6q27zlSM/MGVl3DZGDVRiMbWDVTLN4lSYOT5FtV9Wub+2zMRlK8L1tome40nrOr6tieIzXjwKrZ5VGRkqQh2nahxUlv74LPNPzhVXPPNk/yEuAU4HXA3WU8zRIAAArESURBVMBoTpoBB1bNMot3SdIQfTbJxcDbquoRgCQ7ABcAn2+abApMTt15qJ7+6/cPtsrTlyT70p2ssgZ4gO50lVTVUU2DNeDAqtll24wkaXCSbAf8NfAG4B669oBlwKV07RGPt0vXryTvAT5VVXcm2R74AnAQXY/zKVX1L00D9ijJT4EbgNOqav1k7a6qWt42Wf+SXLKJx1VVb+wtjDaLxbskabCSPIduKFGA9VX1aONIvUvyH8CBVVVJTqfbdX4lsC9waVX9etOAPUpyIt3O+xF0X2LWAh+pql9tGmzKjG1g1azZpnUASZJ+Uarqx1V1W1XdWlWPJnlVkn9unatnj89pjzmGbgjPk1V1ByNrn62qdVV1MrAfcB1wJrB7kouS/HbTcNPlgtYBtDiLd0nS4CRZkeTbSX6U5BNJDkjyNeD9wEWt8/XssSQHJtkNOAq4es6z5zbK1FRVPVJVn6yq4+hOmvkG8O7GsabJ4F9enmUW75KkIToPOB14PvAZ4CvAx6vq0BG+iPdWun+DO4ELqupugCTHAje3DDYNqurBqvqwRyM+jT3VU8yed0nS4Mw/szzJd6tqn5aZpGniwKrZNapeN0nSaOwy7yi8zL0f2+57kgOBdwIvpivYbgfOrarbmgZTS8ctsPazgVU9Z9FmcOddkjQ4HoP3lCQnAOfSHZ35NboC7VDgT4F3VNVVDeNpCiw0sKqqPtQ2lRZj8S5J0oAluQU4oao2zFvfG7iqqg5qEEuNLTKw6h1VtaxpMP2/fGFVkjRISbZN8stz7p+V5PQkd7TM1cB28wt3gMnadr2n0bS4EzgaOL6qfquqLgSebJxJPweLd0nS4CRZDTwI3Jrk+iRHAXcBrwZ+t2m4/v0kyV7zF5Mso5uyqnFaBXwfuDbJxUmOxiMiZ4JtM5KkwUnyTWBlVa1PcgjwZWB1Va1rHK13SVYCHwDOAb5O98Lq4XTnmr+rqq5sGE+NJdkBWEnXPrMCuBRYV1VXb/KDasbiXZI0OAscFXlnVe3XMlNLSQ4C3k532kyAbwLnVdUtTYNpqiR5HvBa4GTPvZ9eFu+SpMFJ8j3g/DlLZ829r6rzn/GhgUpyTlV59J80EPa8S5KG6GJgxzl/5t7/UsNcLfxO6wCSth6HNEmSBqeq3rvYsySH95llCmybZFcWeRmxqh7sOY+kJbBtRpI0eEkO4KkzrX9YVYc1jtSbJI8B97Fw8V5VtbznSJKWwJ13SdIgTY5CXDP58wSwDDhsoTPPB+72qjq4dQhJW4c975KkwUnyJeDzdEOIXlNVhwIPj7BwlzQwFu+SpCG6n+7l1N2B3SZrY+0T/WDrAJK2HnveJUmDlGRnuimSa4AXAbsAx1TVV5sG61mSS1j8i0tV1Wl95pG0NBbvkqTBS/IC4GS6Qn7PqtqzcaTeJFm1wPJewNuAbatqj54jSVoCi3dJ0qgkWVZV90yuL6yqt7TO1Jcky4GzgZcBFwAfrarH26aStDnseZckjcrGwn3iyGZBepRk/ySfAD4L3AgcUFUXWbhLs8ejIiVJGrAknwYOA84FzgSeBHZKumPfHdIkzRbbZiRJo5Xkpqo6pHWOX6QkG3jqhdWNPzcObHJIkzRj3HmXJI3ZQlNHB6Wq9m6dQdLWY8+7JGkUkuyajb0iTxn8GehJTp1zfeS8Z2f0n0jSUli8S5IGJ8l7kuw3ud4+ybXAd4EfJHnlxr9XVR9rFLFPZ825vnDeszf2GUTS0lm8S5KG6GTgW5Pr35v83A14OXBOk0TtZJHrhe4lTTmLd0nSED1eT53IcAywtqqerKo7GN/7XrXI9UL3kqbc2P4DkySNw2NJDgR+ABwFvGPOs+e2idTMfklupdtl32dyzeTek2akGWPxLkkaorcCn6Frlbmgqu4GSHIscHPLYA3s3zqApK3Hc94lSZKkGeHOuyRpkCZtM+8EXkzX2307cG5V3dY0WM+SPMzTe9szuQ/dkKadmgSTtEV8YVWSNDhJTgDWAdfTHYf4B5PrKybPxuSLdF9c3gccWFU7VtVOG382ziZpM9k2I0kanCS3ACdU1YZ563sDV1XVQQ1iNZNkZ+AkYDXwbOAyuhN4HmwaTNJmc+ddkjRE280v3AEma9v1nqaxqvphVV0CvBr4O+AvgTc0DSVpi9jzLkkaop8k2auq7p27mGQZ8ESjTM0kOQJYA7wUuBE4sapuaJtK0pawbUaSNDhJVgIfoJum+nW6FzQPB94NvKuqrmwYr1dJNgAPAWuBa5j35aWqbmoQS9IWsniXJA1SkoOAt9OdNhPgm8B5VXVL02A9S3Idi09Srapa0WMcSUtk8S5JGpwk51TV2a1zSNLWZvEuSRqcJDdV1SGtc0yDJCdt6nlVXdFXFklL5wurkqQh2jbJrnTtMs8wsiMSj9/EswIs3qUZ4s67JGlwkjwG3MfCxXtV1fKeI02lJKuq6vLWOST9/CzeJUmDk+Tmqjq4dY5pl+TeqtqrdQ5JPz+HNEmSNF4LthVJml4W75KkIfpg6wAzwl+/SzPGF1YlSUP08iQvW+RZVdVpvaZpKMltLFykB9i95ziSlsjiXZI0RJ9bYG0v4G3Atj1nae24BdYC7AF4Fr40Y3xhVZI0aEmW0xWpLwMuAD5aVY+3TdVGkpcApwCvA+4GLq+qD7VNJWlzuPMuSRqkJPsDfwYcDPwN8OaqeqJtqv4l2RdYDawBHgAuo9u8O6ppMElbxJ13SdLgJPk0cBhwLvAp4Mm5z8c0pCnJT4EbgNOqav1k7S7Pupdmk8W7JGlwkmzgqZc0N/7ceCziqIY0JTmRbuf9COALwFrgI1X1q02DSdoiFu+SJI1Akh2AlXTtMyuAS4F1VXV102CSNovnvEuSBifJqXOuj5z37Iz+E7VXVY9U1Ser6ji6k2a+Aby7cSxJm8mdd0nS4CS5qaoOmX+90L0kzRJ33iVJQ5RFrhe6l6SZYfEuSRqiWuR6oXtJmhm2zUiSBifJo8B6ul32fSbXTO6XV9UOrbJJ0lI4pEmSNET7tw4gSb8I7rxLkiRJM8Kdd0nS4CR5mKf3tmdyH7ohTTs1CSZJS2TxLkkaoi8CLwSuANZW1b2N80jSVmHbjCRpkJLsDJwErAaeDVxGV8g/2DSYJC2BxbskadCSbAOcDFwInFNV5zeOJElbzLYZSdIgJTkCWAO8FLgROLGqbmibSpKWxp13SdLgJNkAPASsBa4Bnpj7vKpuahBLkpbM4l2SNDhJrmPxSapVVSt6jCNJW43FuyRJkjQj7HmXJA1OkpM29byqrugriyRtTRbvkqQhOn4Tz4ru/HdJmjm2zUiSRiXJqqq6vHUOSdoSFu+SpFFJcm9V7dU6hyRtiW1aB5AkqWdpHUCStpTFuyRpbPyVs6SZ5QurkqTBSXIbCxfpAXbvOY4kbTUW75KkITpugbUAewBn95xFkrYai3dJ0uBU1T0br5O8BDgFeB1wN+BJM5JmlsW7JGlwkuwLrAbWAA8Al9GdsHZU02CStEQeFSlJGpwkPwVuAE6rqvWTtbuqannbZJK0NJ42I0kaolXA94Frk1yc5Gg8IlLSALjzLkkarCQ7ACvp2mdWAJcC66rq6qbBJGkLWbxLkkYhyfOA1wInV9WK1nkkaUtYvEuSJEkzwp53SZIkaUZYvEuSJEkzwuJdkiRJmhEW75IkSdKM+D9mkC3+oMOayQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import seaborn as sns\n",
    "ima1=sns.heatmap(corn, \n",
    "        xticklabels=corn.columns,\n",
    "        yticklabels=corn.columns)\n",
    "\n",
    "# Importing Image module from PIL package  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'AxesSubplot' object has no attribute 'show'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-13-bd011f76db4e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mima1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'AxesSubplot' object has no attribute 'show'"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey-Fuller Test: ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A. Time Series\n",
      "ADF Statistic: -1.397162\n",
      "p-value: 0.583636\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL Time Series\n",
      "ADF Statistic: -0.476121\n",
      "p-value: 0.896593\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: MEDICAMENTOS_otros Time Series\n",
      "ADF Statistic: 0.382128\n",
      "p-value: 0.980814\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_otros Time Series\n",
      "ADF Statistic: 0.693591\n",
      "p-value: 0.989709\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -11.730730019072595\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A. Time Series\n",
      "ADF Statistic: -0.385074\n",
      "p-value: 0.912561\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_otros Time Series\n",
      "ADF Statistic: -0.070465\n",
      "p-value: 0.952302\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: MEDICAMENTOS_otros Time Series\n",
      "ADF Statistic: 0.382128\n",
      "p-value: 0.980814\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA. Time Series\n",
      "ADF Statistic: -2.058613\n",
      "p-value: 0.261479\n",
      "Critical Values:\n",
      "\t1%: -3.512\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -13.401491837862547\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: -3.087821\n",
      "p-value: 0.027468\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: DETERGENTE_PARA_ROPA_otros Time Series\n",
      "ADF Statistic: -0.703884\n",
      "p-value: 0.845741\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA Time Series\n",
      "ADF Statistic: 2.669888\n",
      "p-value: 0.999085\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -9.702606641298097\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: -2.855206\n",
      "p-value: 0.050810\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL Time Series\n",
      "ADF Statistic: -0.476121\n",
      "p-value: 0.896593\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A Time Series\n",
      "ADF Statistic: -1.383607\n",
      "p-value: 0.590109\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -6.947455561939131\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A Time Series\n",
      "ADF Statistic: -3.001995"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p-value: 0.034709\n",
      "Critical Values:\n",
      "\t1%: -3.509\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -8.88760613957627\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S. Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: -0.796913\n",
      "p-value: 0.820027\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A. Time Series\n",
      "ADF Statistic: -1.397162\n",
      "p-value: 0.583636\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A. Time Series\n",
      "ADF Statistic: -0.385074\n",
      "p-value: 0.912561\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: MASCOTAS_otros Time Series\n",
      "ADF Statistic: -0.818048\n",
      "p-value: 0.813763\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 11,\n",
      " AIC Criteria for the best model: -75.68779163792156\n",
      "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S."
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A Time Series\n",
      "ADF Statistic: -2.599535\n",
      "p-value: 0.093093\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_otros Time Series\n",
      "ADF Statistic: 0.693591\n",
      "p-value: 0.989709\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA Time Series\n",
      "ADF Statistic: 2.669888\n",
      "p-value: 0.999085\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A Time Series\n",
      "ADF Statistic: -0.538821\n",
      "p-value: 0.884216\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -10.509838169214401\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ Time Series\n",
      "ADF Statistic: -0.254644\n",
      "p-value: 0.931687\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_EL_TRECE_S.A.S Time Series\n",
      "ADF Statistic: -2.890333\n",
      "p-value: 0.046484\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: OTRAS_CATEGORIAS_otros Time Series\n",
      "ADF Statistic: -2.062712\n",
      "p-value: 0.259770\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -6.7558401891344815\n",
      "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL Time Series\n",
      "ADF Statistic: -0.476121\n",
      "p-value: 0.896593\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: OTRAS_CATEGORIAS_otros Time Series\n",
      "ADF Statistic: -2.062712\n",
      "p-value: 0.259770\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A. Time Series\n",
      "ADF Statistic: -1.397162\n",
      "p-value: 0.583636\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_EL_TRECE_S.A.S Time Series\n",
      "ADF Statistic: -2.890333\n",
      "p-value: 0.046484\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -6.810070209366838\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: MUNDO_BEBES_otros Time Series\n",
      "ADF Statistic: -11.500092\n",
      "p-value: 0.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA. Time Series\n",
      "ADF Statistic: -2.058613\n",
      "p-value: 0.261479\n",
      "Critical Values:\n",
      "\t1%: -3.512\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A Time Series\n",
      "ADF Statistic: -2.599535\n",
      "p-value: 0.093093\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_otros Time Series\n",
      "ADF Statistic: -2.212557\n",
      "p-value: 0.201720\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A Time Series\n",
      "ADF Statistic: -1.383607\n",
      "p-value: 0.590109\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: MEDICAMENTOS_otros Time Series\n",
      "ADF Statistic: 0.382128\n",
      "p-value: 0.980814\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -13.480637977007646\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA. Time Series\n",
      "ADF Statistic: -2.058613\n",
      "p-value: 0.261479\n",
      "Critical Values:\n",
      "\t1%: -3.512\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Lag order for the best model: 14,\n",
      " AIC Criteria for the best model: -10.416200270345527\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_otros Time Series\n",
      "ADF Statistic: -0.070465\n",
      "p-value: 0.952302\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A. Time Series\n",
      "ADF Statistic: -0.385074\n",
      "p-value: 0.912561\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -13.00483598387386\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: 2.669888\n",
      "p-value: 0.999085\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: OTRAS_CATEGORIAS_otros Time Series\n",
      "ADF Statistic: -2.062712\n",
      "p-value: 0.259770\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A Time Series\n",
      "ADF Statistic: -2.599535\n",
      "p-value: 0.093093\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -8.5178765621466\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_EL_TRECE_S.A.S Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: -2.890333\n",
      "p-value: 0.046484\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ Time Series\n",
      "ADF Statistic: -0.254644\n",
      "p-value: 0.931687\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL Time Series\n",
      "ADF Statistic: -0.476121\n",
      "p-value: 0.896593\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -7.184922625099475"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A Time Series\n",
      "ADF Statistic: -1.383607\n",
      "p-value: 0.590109\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_otros Time Series\n",
      "ADF Statistic: -2.212557\n",
      "p-value: 0.201720\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_otros Time Series\n",
      "ADF Statistic: -0.982420\n",
      "p-value: 0.759622\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S Time Series\n",
      "ADF Statistic: -1.723469\n",
      "p-value: 0.419063\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -9.380601309024673"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_otros Time Series\n",
      "ADF Statistic: 0.693591\n",
      "p-value: 0.989709\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A. Time Series\n",
      "ADF Statistic: -1.397162\n",
      "p-value: 0.583636\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A Time Series\n",
      "ADF Statistic: -2.599535\n",
      "p-value: 0.093093\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -2.839847105075254"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ASEO_PERSONAL_otros\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A Time Series\n",
      "ADF Statistic: -0.538821\n",
      "p-value: 0.884216\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A. Time Series\n",
      "ADF Statistic: -1.397162\n",
      "p-value: 0.583636\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A Time Series\n",
      "ADF Statistic: -2.599535\n",
      "p-value: 0.093093\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -8.828846569601303\n",
      "BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS_S.A. Time Series\n",
      "ADF Statistic: -0.712122\n",
      "p-value: 0.843585\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_otros Time Series\n",
      "ADF Statistic: -1.726873\n",
      "p-value: 0.417323\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: MASCOTAS_otros Time Series\n",
      "ADF Statistic: -0.818048\n",
      "p-value: 0.813763\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -16.341691414295404\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_otros Time Series\n",
      "ADF Statistic: -0.982420\n",
      "p-value: 0.759622\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A Time Series\n",
      "ADF Statistic: -1.383607\n",
      "p-value: 0.590109\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -11.432765731876255\n",
      "BEBIDAS_otros\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S Time Series\n",
      "ADF Statistic: -1.723469\n",
      "p-value: 0.419063\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A Time Series\n",
      "ADF Statistic: -1.383607\n",
      "p-value: 0.590109\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Lag order for the best model: 6,\n",
      " AIC Criteria for the best model: -10.373220579128908\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_otros Time Series\n",
      "ADF Statistic: -0.070465\n",
      "p-value: 0.952302\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S Time Series\n",
      "ADF Statistic: -1.723469\n",
      "p-value: 0.419063\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -12.708709951555743\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_otros Time Series\n",
      "ADF Statistic: -1.726873\n",
      "p-value: 0.417323\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS_S.A. Time Series\n",
      "ADF Statistic: -0.712122\n",
      "p-value: 0.843585\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: DETERGENTE_PARA_ROPA_otros Time Series\n",
      "ADF Statistic: -0.703884\n",
      "p-value: 0.845741\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: MEDICAMENTOS_otros Time Series\n",
      "ADF Statistic: 0.382128\n",
      "p-value: 0.980814\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -10.361124001745761"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Augmented Dickey-Fuller Test: DETERGENTE_PARA_ROPA_otros Time Series\n",
      "ADF Statistic: -0.703884\n",
      "p-value: 0.845741\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_otros Time Series\n",
      "ADF Statistic: -1.726873\n",
      "p-value: 0.417323\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -7.108763130447013\n",
      "Augmented Dickey-Fuller Test: MASCOTAS_otros Time Series"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ADF Statistic: -0.818048\n",
      "p-value: 0.813763\n",
      "Critical Values:\n",
      "\t1%: -3.510\n",
      "\t5%: -2.896\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S. Time Series\n",
      "ADF Statistic: -0.796913\n",
      "p-value: 0.820027\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS_S.A. Time Series\n",
      "ADF Statistic: -0.712122\n",
      "p-value: 0.843585\n",
      "Critical Values:\n",
      "\t1%: -3.515\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: DETERGENTE_PARA_ROPA_otros Time Series\n",
      "ADF Statistic: -0.703884\n",
      "p-value: 0.845741\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: MEDICAMENTOS_otros Time Series\n",
      "ADF Statistic: 0.382128\n",
      "p-value: 0.980814\n",
      "Critical Values:\n",
      "\t1%: -3.513\n",
      "\t5%: -2.897\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_otros Time Series\n",
      "ADF Statistic: -2.212557\n",
      "p-value: 0.201720\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_otros Time Series\n",
      "ADF Statistic: -1.726873\n",
      "p-value: 0.417323\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -13.108613884421363\n",
      "Augmented Dickey-Fuller Test: MUNDO_BEBES_otros Time Series\n",
      "ADF Statistic: -11.500092\n",
      "p-value: 0.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L Time Series\n",
      "ADF Statistic: 8.097166\n",
      "p-value: 1.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: OTRAS_CATEGORIAS_otros Time Series\n",
      "ADF Statistic: -2.062712\n",
      "p-value: 0.259770\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA Time Series\n",
      "ADF Statistic: 2.669888\n",
      "p-value: 0.999085\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL Time Series\n",
      "ADF Statistic: -0.476121\n",
      "p-value: 0.896593\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ Time Series\n",
      "ADF Statistic: -0.254644\n",
      "p-value: 0.931687\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -6.351528735679283\n",
      "Augmented Dickey-Fuller Test: Otros Time Series\n",
      "ADF Statistic: -2.138439\n",
      "p-value: 0.229341\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ Time Series\n",
      "ADF Statistic: -0.254644\n",
      "p-value: 0.931687\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA Time Series\n",
      "ADF Statistic: 2.669888\n",
      "p-value: 0.999085\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A Time Series\n",
      "ADF Statistic: -1.372484\n",
      "p-value: 0.595394\n",
      "Critical Values:\n",
      "\t1%: -3.511\n",
      "\t5%: -2.897\n",
      "\t10%: -2.585\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 15,\n",
      " AIC Criteria for the best model: -8.452919960530583\n",
      "Augmented Dickey-Fuller Test: SALUD_Y_BIENESTAR_otros Time Series\n",
      "ADF Statistic: -2.664347\n",
      "p-value: 0.080414\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: DETERGENTE_PARA_ROPA_otros Time Series\n",
      "ADF Statistic: -0.703884\n",
      "p-value: 0.845741\n",
      "Critical Values:\n",
      "\t1%: -3.514\n",
      "\t5%: -2.898\n",
      "\t10%: -2.586\n",
      "\n",
      "Augmented Dickey-Fuller Test: ASEO_HOGAR_otros Time Series\n",
      "ADF Statistic: -0.070465\n",
      "p-value: 0.952302\n",
      "Critical Values:\n",
      "\t1%: -3.516\n",
      "\t5%: -2.899\n",
      "\t10%: -2.587\n",
      "\n",
      "Augmented Dickey-Fuller Test: MUNDO_BEBE_otros Time Series\n",
      "ADF Statistic: -11.286575\n",
      "p-value: 0.000000\n",
      "Critical Values:\n",
      "\t1%: -3.519\n",
      "\t5%: -2.900\n",
      "\t10%: -2.587\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:579: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  ' ignored when e.g. forecasting.', ValueWarning)\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:59: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lag order for the best model: 6,\n",
      " AIC Criteria for the best model: -9.121715316767386\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2497.269, BIC=2508.856, Fit time=0.272 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2535.337, BIC=2539.972, Fit time=0.020 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2513.113, BIC=2522.383, Fit time=0.105 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2497.387, BIC=2506.657, Fit time=0.166 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2497.061, BIC=2510.966, Fit time=0.236 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2502.304, BIC=2513.891, Fit time=0.191 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2498.633, BIC=2514.855, Fit time=0.814 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2517.219, BIC=2526.489, Fit time=0.100 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2498.939, BIC=2517.478, Fit time=2.311 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2497.484, BIC=2509.071, Fit time=0.190 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2494.169, BIC=2510.391, Fit time=0.436 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2493.892, BIC=2507.797, Fit time=0.287 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2495.994, BIC=2514.534, Fit time=0.442 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2493.340, BIC=2504.927, Fit time=0.247 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2524.896, BIC=2534.166, Fit time=0.051 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2493.390, BIC=2507.295, Fit time=0.343 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2495.220, BIC=2511.442, Fit time=0.594 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2500.710, BIC=2509.980, Fit time=0.169 seconds\n",
      "Fit ARIMA: order=(3, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2495.277, BIC=2509.182, Fit time=0.269 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2494.570, BIC=2508.475, Fit time=0.368 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2496.514, BIC=2512.736, Fit time=0.510 seconds\n",
      "Total fit time: 8.149 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2621.755, BIC=2633.342, Fit time=0.245 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2666.310, BIC=2670.945, Fit time=0.017 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2625.556, BIC=2634.826, Fit time=0.149 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2620.607, BIC=2629.877, Fit time=0.205 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2616.982, BIC=2628.569, Fit time=0.338 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2623.228, BIC=2632.498, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2618.515, BIC=2632.420, Fit time=0.459 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2652.837, BIC=2659.789, Fit time=0.053 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2620.455, BIC=2636.677, Fit time=0.505 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2618.225, BIC=2632.130, Fit time=0.370 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2623.643, BIC=2632.913, Fit time=0.210 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2623.855, BIC=2637.760, Fit time=0.344 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2602.561, BIC=2618.783, Fit time=0.594 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2608.632, BIC=2622.537, Fit time=0.446 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2603.749, BIC=2622.289, Fit time=0.658 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2611.199, BIC=2625.104, Fit time=0.538 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2604.057, BIC=2622.597, Fit time=1.233 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2652.097, BIC=2663.685, Fit time=0.776 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2605.745, BIC=2626.603, Fit time=1.129 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2598.339, BIC=2616.879, Fit time=1.004 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2619.916, BIC=2636.139, Fit time=0.436 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2624.434, BIC=2645.292, Fit time=0.873 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2626.255, BIC=2649.430, Fit time=1.114 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2605.956, BIC=2622.179, Fit time=0.751 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2599.876, BIC=2620.733, Fit time=1.000 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2610.619, BIC=2626.841, Fit time=0.452 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2600.115, BIC=2620.973, Fit time=1.183 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2654.117, BIC=2668.022, Fit time=0.688 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2601.848, BIC=2625.023, Fit time=1.239 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2595.937, BIC=2616.795, Fit time=1.100 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2621.751, BIC=2640.291, Fit time=0.517 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2605.917, BIC=2624.457, Fit time=1.240 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2597.361, BIC=2620.536, Fit time=1.635 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2611.072, BIC=2629.612, Fit time=0.556 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2597.525, BIC=2620.699, Fit time=1.741 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2647.861, BIC=2664.083, Fit time=0.845 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2599.360, BIC=2624.852, Fit time=2.288 seconds\n",
      "Total fit time: 27.119 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2596.454, BIC=2608.042, Fit time=0.157 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2625.801, BIC=2630.436, Fit time=0.022 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2603.301, BIC=2612.571, Fit time=0.101 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2595.207, BIC=2604.477, Fit time=0.124 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2595.642, BIC=2607.230, Fit time=0.169 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2621.140, BIC=2628.093, Fit time=0.059 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2596.396, BIC=2607.983, Fit time=0.230 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2597.045, BIC=2610.950, Fit time=0.408 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2597.774, BIC=2604.727, Fit time=0.071 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2593.046, BIC=2604.633, Fit time=0.156 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2592.321, BIC=2608.544, Fit time=0.806 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2593.386, BIC=2611.926, Fit time=0.901 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 0, 6); AIC=2609.589, BIC=2623.494, Fit time=0.363 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2593.883, BIC=2612.423, Fit time=1.120 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 2, 6); AIC=2594.270, BIC=2615.128, Fit time=1.131 seconds\n",
      "Fit ARIMA: order=(0, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2593.048, BIC=2606.953, Fit time=0.220 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2592.615, BIC=2611.155, Fit time=0.732 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2593.397, BIC=2607.302, Fit time=0.239 seconds\n",
      "Total fit time: 7.036 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2713.258, BIC=2724.845, Fit time=0.209 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2746.778, BIC=2751.413, Fit time=0.027 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2716.896, BIC=2726.166, Fit time=0.117 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2712.614, BIC=2721.884, Fit time=0.137 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2709.037, BIC=2720.624, Fit time=0.159 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2713.300, BIC=2722.570, Fit time=0.159 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2710.926, BIC=2724.831, Fit time=0.381 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2746.120, BIC=2753.072, Fit time=0.043 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2712.740, BIC=2728.963, Fit time=0.679 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2709.961, BIC=2723.866, Fit time=0.237 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2711.693, BIC=2720.963, Fit time=0.116 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2712.650, BIC=2726.555, Fit time=0.203 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2714.541, BIC=2730.763, Fit time=0.312 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 1, 6); AIC=2711.036, BIC=2724.941, Fit time=0.277 seconds\n",
      "Total fit time: 3.073 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2764.510, BIC=2776.097, Fit time=0.352 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2788.528, BIC=2793.163, Fit time=0.036 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2768.574, BIC=2777.844, Fit time=0.100 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2763.143, BIC=2772.413, Fit time=0.219 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2764.297, BIC=2775.884, Fit time=0.195 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2790.129, BIC=2797.082, Fit time=0.049 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2764.489, BIC=2776.077, Fit time=0.236 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2766.129, BIC=2780.034, Fit time=0.318 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2760.732, BIC=2767.685, Fit time=0.096 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2762.338, BIC=2771.608, Fit time=0.149 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2762.425, BIC=2771.695, Fit time=0.195 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2764.129, BIC=2775.716, Fit time=0.272 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2762.217, BIC=2771.487, Fit time=0.224 seconds\n",
      "Total fit time: 2.465 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2426.639, BIC=2438.227, Fit time=0.265 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2462.488, BIC=2467.123, Fit time=0.021 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2443.954, BIC=2453.224, Fit time=0.107 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2427.969, BIC=2437.239, Fit time=0.139 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2427.771, BIC=2441.676, Fit time=0.302 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2447.942, BIC=2457.212, Fit time=0.166 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2427.243, BIC=2441.148, Fit time=0.350 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2428.953, BIC=2445.175, Fit time=0.722 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2427.909, BIC=2441.813, Fit time=0.323 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2430.438, BIC=2439.708, Fit time=0.118 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2423.373, BIC=2437.278, Fit time=0.262 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2435.672, BIC=2454.212, Fit time=0.633 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2423.790, BIC=2440.013, Fit time=0.366 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2443.867, BIC=2455.455, Fit time=0.187 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2423.133, BIC=2439.356, Fit time=0.422 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2428.104, BIC=2442.009, Fit time=0.317 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2420.312, BIC=2438.852, Fit time=0.481 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2428.112, BIC=2444.335, Fit time=0.444 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2436.158, BIC=2457.015, Fit time=1.472 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2435.458, BIC=2458.633, Fit time=1.543 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2422.311, BIC=2443.169, Fit time=1.062 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2420.470, BIC=2436.692, Fit time=0.374 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2418.299, BIC=2439.157, Fit time=0.715 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2430.082, BIC=2448.622, Fit time=0.600 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2420.294, BIC=2443.469, Fit time=1.254 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2417.633, BIC=2436.173, Fit time=0.483 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2429.754, BIC=2445.977, Fit time=0.421 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2435.888, BIC=2456.745, Fit time=1.129 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2418.386, BIC=2439.243, Fit time=0.602 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2440.830, BIC=2457.052, Fit time=0.540 seconds\n",
      "Total fit time: 15.879 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2582.989, BIC=2594.577, Fit time=0.156 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2636.786, BIC=2641.421, Fit time=0.018 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2590.026, BIC=2599.296, Fit time=0.114 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2592.397, BIC=2601.667, Fit time=0.133 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2584.260, BIC=2598.165, Fit time=0.237 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2609.605, BIC=2618.875, Fit time=0.080 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2584.500, BIC=2598.405, Fit time=0.362 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2586.188, BIC=2602.410, Fit time=0.517 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2582.791, BIC=2596.696, Fit time=0.532 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2582.015, BIC=2593.602, Fit time=0.224 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2584.698, BIC=2600.921, Fit time=0.695 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2583.199, BIC=2597.104, Fit time=0.272 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2609.532, BIC=2618.802, Fit time=0.061 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2583.415, BIC=2597.320, Fit time=0.418 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2585.164, BIC=2601.386, Fit time=0.470 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2580.152, BIC=2589.422, Fit time=0.080 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2581.417, BIC=2593.005, Fit time=0.170 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2607.558, BIC=2614.510, Fit time=0.039 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2581.704, BIC=2593.291, Fit time=0.298 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2583.265, BIC=2597.170, Fit time=0.426 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2605.929, BIC=2612.881, Fit time=0.103 seconds\n",
      "Total fit time: 5.433 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2547.656, BIC=2559.243, Fit time=0.171 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2607.790, BIC=2612.425, Fit time=0.027 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2558.709, BIC=2567.979, Fit time=0.116 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2547.569, BIC=2556.839, Fit time=0.164 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2545.446, BIC=2557.033, Fit time=0.189 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2553.404, BIC=2562.674, Fit time=0.132 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2546.989, BIC=2560.894, Fit time=0.361 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2580.068, BIC=2587.021, Fit time=0.058 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2548.032, BIC=2564.254, Fit time=1.209 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2545.894, BIC=2559.799, Fit time=0.281 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2569.097, BIC=2578.367, Fit time=0.161 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2553.631, BIC=2567.536, Fit time=0.278 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2540.700, BIC=2556.923, Fit time=0.573 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2542.888, BIC=2556.793, Fit time=0.446 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2541.786, BIC=2560.326, Fit time=0.800 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2548.669, BIC=2562.574, Fit time=0.672 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2542.418, BIC=2560.958, Fit time=1.332 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2571.920, BIC=2583.508, Fit time=0.371 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2543.759, BIC=2564.616, Fit time=1.658 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2533.388, BIC=2551.928, Fit time=0.787 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2545.614, BIC=2561.837, Fit time=0.379 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2552.021, BIC=2572.878, Fit time=0.967 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2552.304, BIC=2575.479, Fit time=1.045 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2536.091, BIC=2552.314, Fit time=0.643 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2534.357, BIC=2555.214, Fit time=1.191 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2541.130, BIC=2557.352, Fit time=0.641 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2535.082, BIC=2555.939, Fit time=1.236 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2563.075, BIC=2576.980, Fit time=0.574 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2536.326, BIC=2559.501, Fit time=1.961 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2532.798, BIC=2553.655, Fit time=0.955 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2547.542, BIC=2566.082, Fit time=0.401 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2535.680, BIC=2554.220, Fit time=1.211 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2533.283, BIC=2556.458, Fit time=1.499 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2539.655, BIC=2558.195, Fit time=0.855 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2535.858, BIC=2559.033, Fit time=2.165 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2567.520, BIC=2583.742, Fit time=0.454 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2535.274, BIC=2560.767, Fit time=2.703 seconds\n",
      "Total fit time: 28.735 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2356.225, BIC=2367.813, Fit time=0.557 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2408.524, BIC=2413.159, Fit time=0.019 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2370.418, BIC=2379.688, Fit time=0.094 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2354.937, BIC=2364.207, Fit time=0.148 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2355.154, BIC=2366.741, Fit time=0.171 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2373.736, BIC=2380.689, Fit time=0.058 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2355.934, BIC=2367.521, Fit time=0.196 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2356.288, BIC=2370.192, Fit time=0.501 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2381.710, BIC=2388.662, Fit time=0.075 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2356.682, BIC=2368.269, Fit time=0.169 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2351.772, BIC=2365.677, Fit time=0.462 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2352.982, BIC=2369.205, Fit time=0.665 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2368.748, BIC=2380.335, Fit time=0.235 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2353.087, BIC=2369.310, Fit time=0.759 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2354.982, BIC=2373.522, Fit time=1.139 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2353.087, BIC=2369.309, Fit time=0.552 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2357.424, BIC=2373.647, Fit time=0.553 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2358.686, BIC=2377.226, Fit time=1.536 seconds\n",
      "Total fit time: 7.912 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2269.358, BIC=2280.945, Fit time=0.265 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2268.026, BIC=2272.661, Fit time=0.016 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2267.672, BIC=2276.942, Fit time=0.125 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2267.545, BIC=2276.815, Fit time=0.150 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2269.486, BIC=2281.074, Fit time=0.401 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2265.613, BIC=2272.566, Fit time=0.053 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2267.402, BIC=2276.672, Fit time=0.117 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2277.208, BIC=2286.478, Fit time=0.157 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2280.241, BIC=2291.828, Fit time=0.421 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2267.540, BIC=2276.810, Fit time=0.103 seconds\n",
      "Total fit time: 1.818 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2589.432, BIC=2601.019, Fit time=0.176 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2629.255, BIC=2633.890, Fit time=0.033 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2604.791, BIC=2614.061, Fit time=0.092 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2596.143, BIC=2605.413, Fit time=0.148 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2590.221, BIC=2604.126, Fit time=0.257 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2620.363, BIC=2629.633, Fit time=0.097 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2589.478, BIC=2603.383, Fit time=0.372 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2590.937, BIC=2607.159, Fit time=0.698 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2589.285, BIC=2603.190, Fit time=0.275 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2586.298, BIC=2597.885, Fit time=0.167 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2589.856, BIC=2606.079, Fit time=0.590 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2587.274, BIC=2601.179, Fit time=0.222 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2617.418, BIC=2626.688, Fit time=0.060 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2586.556, BIC=2600.460, Fit time=0.304 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2587.890, BIC=2604.112, Fit time=0.897 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2589.053, BIC=2598.323, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(3, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2588.808, BIC=2602.713, Fit time=0.198 seconds\n",
      "Total fit time: 4.732 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1770.937, BIC=1782.525, Fit time=0.498 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1819.112, BIC=1823.747, Fit time=0.025 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=1793.679, BIC=1802.949, Fit time=0.111 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1769.745, BIC=1779.015, Fit time=0.138 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=1771.674, BIC=1783.262, Fit time=0.174 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1792.714, BIC=1799.666, Fit time=0.165 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=1771.667, BIC=1783.255, Fit time=0.224 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=1772.038, BIC=1785.943, Fit time=1.419 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=1794.830, BIC=1801.783, Fit time=0.078 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=1773.247, BIC=1784.835, Fit time=0.189 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=1774.990, BIC=1788.895, Fit time=0.425 seconds\n",
      "Total fit time: 3.462 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2291.917, BIC=2303.504, Fit time=0.153 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2324.838, BIC=2329.473, Fit time=0.024 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2314.188, BIC=2323.458, Fit time=0.111 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2292.914, BIC=2302.184, Fit time=0.110 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2293.909, BIC=2307.814, Fit time=0.279 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2307.724, BIC=2316.994, Fit time=0.111 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2293.867, BIC=2307.772, Fit time=0.334 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2294.494, BIC=2310.717, Fit time=0.431 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2292.713, BIC=2306.618, Fit time=0.244 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2298.657, BIC=2307.927, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2292.441, BIC=2306.346, Fit time=0.375 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2301.522, BIC=2308.474, Fit time=0.074 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2288.487, BIC=2304.709, Fit time=0.592 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2290.463, BIC=2309.003, Fit time=0.751 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2305.170, BIC=2319.074, Fit time=0.462 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2290.213, BIC=2308.753, Fit time=0.747 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2290.892, BIC=2311.749, Fit time=0.905 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2289.862, BIC=2308.402, Fit time=0.671 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2293.869, BIC=2312.409, Fit time=0.677 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2293.649, BIC=2314.506, Fit time=1.233 seconds\n",
      "Total fit time: 8.434 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2540.173, BIC=2551.761, Fit time=0.256 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2597.084, BIC=2601.719, Fit time=0.026 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2555.563, BIC=2564.833, Fit time=0.082 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2539.794, BIC=2549.064, Fit time=0.165 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2540.481, BIC=2552.068, Fit time=0.176 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2563.306, BIC=2570.258, Fit time=0.074 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2540.526, BIC=2552.114, Fit time=0.211 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2542.454, BIC=2556.359, Fit time=0.435 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2565.384, BIC=2572.336, Fit time=0.073 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2549.746, BIC=2561.333, Fit time=0.244 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2529.211, BIC=2543.116, Fit time=0.421 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2532.531, BIC=2548.754, Fit time=0.733 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2552.849, BIC=2564.436, Fit time=0.300 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2532.438, BIC=2548.660, Fit time=0.521 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2531.966, BIC=2550.506, Fit time=0.752 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2524.552, BIC=2540.774, Fit time=0.506 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2534.004, BIC=2547.909, Fit time=0.362 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2540.081, BIC=2558.621, Fit time=0.598 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2537.256, BIC=2558.114, Fit time=0.693 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2523.996, BIC=2542.536, Fit time=0.518 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2535.022, BIC=2551.245, Fit time=0.839 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2524.862, BIC=2545.720, Fit time=0.869 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2553.769, BIC=2567.673, Fit time=0.378 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2526.649, BIC=2549.824, Fit time=1.236 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2521.361, BIC=2542.219, Fit time=1.453 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2535.389, BIC=2553.929, Fit time=0.627 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2537.732, BIC=2560.907, Fit time=1.066 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2533.454, BIC=2549.676, Fit time=0.363 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2521.109, BIC=2539.649, Fit time=1.562 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2543.350, BIC=2559.573, Fit time=0.448 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2520.991, BIC=2541.848, Fit time=1.719 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 2, 6); AIC=2522.900, BIC=2541.440, Fit time=0.691 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2534.622, BIC=2553.162, Fit time=0.667 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2537.235, BIC=2560.410, Fit time=1.062 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2532.639, BIC=2548.861, Fit time=0.458 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2522.589, BIC=2545.763, Fit time=2.384 seconds\n",
      "Total fit time: 23.016 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2360.959, BIC=2372.546, Fit time=0.212 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2402.622, BIC=2407.257, Fit time=0.023 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2379.072, BIC=2388.342, Fit time=0.110 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2360.133, BIC=2369.403, Fit time=0.116 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2361.279, BIC=2372.866, Fit time=0.181 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2379.637, BIC=2386.590, Fit time=0.065 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2361.867, BIC=2373.454, Fit time=0.231 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2361.140, BIC=2375.044, Fit time=0.488 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2377.035, BIC=2383.988, Fit time=0.098 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2365.753, BIC=2377.341, Fit time=0.167 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2364.426, BIC=2378.330, Fit time=0.421 seconds\n",
      "Total fit time: 2.123 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2427.375, BIC=2438.962, Fit time=0.345 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2451.261, BIC=2455.896, Fit time=0.016 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2442.358, BIC=2451.628, Fit time=0.095 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2426.904, BIC=2436.174, Fit time=0.152 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2428.901, BIC=2440.488, Fit time=0.447 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2451.033, BIC=2457.986, Fit time=0.074 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2428.903, BIC=2440.490, Fit time=0.284 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2430.216, BIC=2444.121, Fit time=0.440 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2425.289, BIC=2432.241, Fit time=0.094 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2427.288, BIC=2436.558, Fit time=0.300 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2427.286, BIC=2436.556, Fit time=0.187 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2428.816, BIC=2440.403, Fit time=0.321 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2426.346, BIC=2435.616, Fit time=0.132 seconds\n",
      "Total fit time: 2.896 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2427.792, BIC=2439.380, Fit time=0.195 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2476.806, BIC=2481.441, Fit time=0.026 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2462.956, BIC=2472.226, Fit time=0.093 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2427.491, BIC=2436.761, Fit time=0.136 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2429.483, BIC=2441.071, Fit time=0.161 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2442.543, BIC=2449.495, Fit time=0.071 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2429.259, BIC=2440.847, Fit time=0.202 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2429.712, BIC=2443.617, Fit time=0.404 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2450.555, BIC=2457.508, Fit time=0.080 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2431.729, BIC=2443.316, Fit time=0.157 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2431.816, BIC=2445.721, Fit time=0.255 seconds\n",
      "Total fit time: 1.787 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2435.436, BIC=2447.024, Fit time=0.212 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2493.606, BIC=2498.241, Fit time=0.019 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2459.227, BIC=2468.497, Fit time=0.080 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2436.837, BIC=2446.107, Fit time=0.144 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2437.367, BIC=2451.272, Fit time=0.319 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2455.195, BIC=2464.465, Fit time=0.094 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2437.181, BIC=2451.086, Fit time=0.341 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2437.863, BIC=2454.085, Fit time=0.523 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2428.944, BIC=2442.849, Fit time=0.261 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2427.821, BIC=2439.409, Fit time=0.181 seconds\n",
      "Fit ARIMA: order=(3, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2430.939, BIC=2447.161, Fit time=0.344 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2429.375, BIC=2443.280, Fit time=0.228 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2454.713, BIC=2463.983, Fit time=0.060 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2429.413, BIC=2443.318, Fit time=0.268 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2431.673, BIC=2447.895, Fit time=0.638 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2449.823, BIC=2459.093, Fit time=0.138 seconds\n",
      "Fit ARIMA: order=(3, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2428.495, BIC=2442.400, Fit time=0.215 seconds\n",
      "Total fit time: 4.084 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2500.461, BIC=2512.048, Fit time=0.166 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2549.736, BIC=2554.371, Fit time=0.028 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2515.285, BIC=2524.555, Fit time=0.092 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2506.419, BIC=2515.689, Fit time=0.137 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2502.419, BIC=2516.324, Fit time=0.275 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2517.419, BIC=2526.689, Fit time=0.078 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2501.412, BIC=2515.317, Fit time=0.310 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2499.855, BIC=2516.078, Fit time=0.478 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2503.128, BIC=2517.033, Fit time=0.389 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2501.515, BIC=2520.055, Fit time=0.948 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2501.005, BIC=2514.910, Fit time=0.320 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2503.569, BIC=2522.109, Fit time=0.465 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2528.726, BIC=2540.313, Fit time=0.267 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2503.837, BIC=2524.695, Fit time=1.012 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2500.932, BIC=2519.472, Fit time=0.545 seconds\n",
      "Total fit time: 5.514 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2322.225, BIC=2333.813, Fit time=0.448 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2363.063, BIC=2367.698, Fit time=0.394 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2335.190, BIC=2344.460, Fit time=0.094 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2321.890, BIC=2331.160, Fit time=0.153 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2322.627, BIC=2334.214, Fit time=0.150 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2344.188, BIC=2351.140, Fit time=0.074 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2323.217, BIC=2334.804, Fit time=0.170 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2323.997, BIC=2337.902, Fit time=0.370 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2335.416, BIC=2342.368, Fit time=0.079 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2325.786, BIC=2337.373, Fit time=0.209 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2325.382, BIC=2339.286, Fit time=0.312 seconds\n",
      "Total fit time: 2.455 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2385.370, BIC=2396.958, Fit time=0.303 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2399.118, BIC=2403.753, Fit time=0.016 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2396.942, BIC=2406.212, Fit time=0.094 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2385.716, BIC=2394.986, Fit time=0.130 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2386.337, BIC=2400.242, Fit time=0.448 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2399.650, BIC=2408.920, Fit time=0.084 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2385.748, BIC=2399.652, Fit time=0.509 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2389.013, BIC=2405.236, Fit time=1.218 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2385.468, BIC=2399.373, Fit time=0.344 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2384.343, BIC=2393.613, Fit time=0.129 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2385.517, BIC=2397.104, Fit time=0.208 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2399.684, BIC=2406.637, Fit time=0.034 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2384.573, BIC=2396.161, Fit time=0.242 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2386.370, BIC=2400.275, Fit time=0.478 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2382.552, BIC=2389.504, Fit time=0.087 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2383.786, BIC=2393.056, Fit time=0.165 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2383.016, BIC=2392.286, Fit time=0.176 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2384.826, BIC=2396.414, Fit time=0.331 seconds\n",
      "Total fit time: 5.024 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2335.647, BIC=2347.235, Fit time=0.192 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2366.595, BIC=2371.230, Fit time=0.021 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2347.682, BIC=2356.952, Fit time=0.113 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2335.017, BIC=2344.287, Fit time=0.137 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2336.482, BIC=2348.070, Fit time=0.181 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2362.181, BIC=2369.133, Fit time=0.061 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2336.490, BIC=2348.078, Fit time=0.225 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2338.478, BIC=2352.383, Fit time=0.551 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2339.063, BIC=2346.015, Fit time=0.075 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2337.617, BIC=2349.205, Fit time=0.148 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2339.469, BIC=2353.374, Fit time=0.311 seconds\n",
      "Total fit time: 2.026 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2271.696, BIC=2283.284, Fit time=0.201 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2314.238, BIC=2318.873, Fit time=0.023 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2289.771, BIC=2299.041, Fit time=0.114 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2270.616, BIC=2279.886, Fit time=0.128 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2272.568, BIC=2284.155, Fit time=0.194 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2293.279, BIC=2300.232, Fit time=0.057 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2272.342, BIC=2283.929, Fit time=0.261 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2272.982, BIC=2286.887, Fit time=0.619 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2291.900, BIC=2298.852, Fit time=0.081 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2274.128, BIC=2285.715, Fit time=0.183 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2276.101, BIC=2290.006, Fit time=0.324 seconds\n",
      "Total fit time: 2.208 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2411.188, BIC=2422.775, Fit time=0.184 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2430.270, BIC=2434.905, Fit time=0.036 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2419.519, BIC=2428.789, Fit time=0.108 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2409.407, BIC=2418.677, Fit time=0.163 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2410.522, BIC=2422.110, Fit time=0.159 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2429.012, BIC=2435.965, Fit time=0.060 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2411.021, BIC=2422.609, Fit time=0.204 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2411.670, BIC=2425.574, Fit time=0.370 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2406.730, BIC=2413.683, Fit time=0.077 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2408.379, BIC=2417.648, Fit time=0.146 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2408.521, BIC=2417.791, Fit time=0.150 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2409.941, BIC=2421.529, Fit time=0.982 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2408.828, BIC=2418.098, Fit time=0.118 seconds\n",
      "Total fit time: 2.774 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2341.785, BIC=2353.372, Fit time=0.230 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2387.127, BIC=2391.762, Fit time=0.020 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2363.258, BIC=2372.528, Fit time=0.109 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2343.605, BIC=2352.875, Fit time=0.119 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2342.928, BIC=2356.833, Fit time=0.337 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2365.219, BIC=2374.489, Fit time=0.165 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2342.982, BIC=2356.887, Fit time=0.353 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2344.925, BIC=2361.147, Fit time=0.650 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2333.877, BIC=2347.781, Fit time=0.280 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2334.682, BIC=2346.269, Fit time=0.143 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2332.784, BIC=2349.006, Fit time=0.764 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2336.362, BIC=2357.220, Fit time=1.424 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2331.888, BIC=2350.428, Fit time=0.921 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 0, 6); AIC=2339.538, BIC=2355.761, Fit time=0.562 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2333.869, BIC=2354.726, Fit time=1.455 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 0, 6); AIC=2352.603, BIC=2366.508, Fit time=0.396 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 2, 6); AIC=2335.634, BIC=2358.808, Fit time=2.051 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2345.175, BIC=2361.398, Fit time=0.363 seconds\n",
      "Fit ARIMA: order=(3, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2333.629, BIC=2354.487, Fit time=1.466 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2333.593, BIC=2349.816, Fit time=0.316 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2341.029, BIC=2361.887, Fit time=0.645 seconds\n",
      "Fit ARIMA: order=(3, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2336.661, BIC=2359.836, Fit time=1.329 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(2, 1, 1, 6); AIC=2333.802, BIC=2354.660, Fit time=1.428 seconds\n",
      "Total fit time: 15.544 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2150.058, BIC=2161.646, Fit time=0.310 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2178.726, BIC=2183.361, Fit time=0.024 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2162.309, BIC=2171.579, Fit time=0.099 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2149.567, BIC=2158.837, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2151.353, BIC=2162.941, Fit time=0.178 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2169.161, BIC=2176.113, Fit time=0.061 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2151.325, BIC=2162.912, Fit time=0.234 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2152.947, BIC=2166.852, Fit time=0.385 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2160.520, BIC=2167.472, Fit time=0.100 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2154.362, BIC=2165.949, Fit time=0.185 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2153.154, BIC=2167.059, Fit time=0.718 seconds\n",
      "Total fit time: 2.429 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2026.522, BIC=2038.109, Fit time=0.337 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2053.463, BIC=2058.098, Fit time=0.026 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2032.585, BIC=2041.855, Fit time=0.127 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2031.888, BIC=2041.158, Fit time=0.171 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2027.429, BIC=2041.334, Fit time=0.411 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2038.046, BIC=2047.316, Fit time=0.134 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2026.079, BIC=2039.984, Fit time=0.400 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2031.041, BIC=2042.628, Fit time=0.304 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2026.487, BIC=2042.709, Fit time=1.217 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2023.686, BIC=2035.274, Fit time=0.254 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 2, 6); AIC=2024.763, BIC=2038.668, Fit time=0.392 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2024.284, BIC=2033.554, Fit time=0.137 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2043.756, BIC=2053.026, Fit time=0.144 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 2, 6); AIC=2025.697, BIC=2039.602, Fit time=0.286 seconds\n",
      "Total fit time: 4.350 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2026.408, BIC=2037.996, Fit time=0.188 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2091.495, BIC=2096.130, Fit time=0.023 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2043.330, BIC=2052.600, Fit time=0.114 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2025.487, BIC=2034.757, Fit time=0.143 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2024.260, BIC=2035.847, Fit time=0.182 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 0, 6); AIC=2029.244, BIC=2038.514, Fit time=0.153 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2025.520, BIC=2039.425, Fit time=0.574 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2049.898, BIC=2056.851, Fit time=0.052 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 2, 6); AIC=2026.103, BIC=2042.326, Fit time=1.149 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2025.753, BIC=2039.658, Fit time=0.341 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=2057.402, BIC=2066.672, Fit time=0.159 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2034.576, BIC=2048.481, Fit time=0.278 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 1, 6); AIC=2034.839, BIC=2051.062, Fit time=0.638 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(2, 1, 1, 6); AIC=2025.993, BIC=2039.898, Fit time=0.417 seconds\n",
      "Total fit time: 4.419 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1843.602, BIC=1855.190, Fit time=0.228 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1839.825, BIC=1844.460, Fit time=0.020 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=1839.262, BIC=1848.532, Fit time=0.113 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1839.486, BIC=1848.756, Fit time=0.121 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1837.616, BIC=1844.569, Fit time=0.053 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=1839.303, BIC=1848.573, Fit time=0.113 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=1840.735, BIC=1852.322, Fit time=0.350 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1839.531, BIC=1848.801, Fit time=0.103 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1839.466, BIC=1848.736, Fit time=0.322 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1841.414, BIC=1853.001, Fit time=0.300 seconds\n",
      "Total fit time: 1.724 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1843.602, BIC=1855.190, Fit time=0.205 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1839.825, BIC=1844.460, Fit time=0.017 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=1839.262, BIC=1848.532, Fit time=0.115 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1839.486, BIC=1848.756, Fit time=0.119 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1837.616, BIC=1844.569, Fit time=0.042 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=1839.303, BIC=1848.573, Fit time=0.117 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 1, 6); AIC=1840.735, BIC=1852.322, Fit time=0.356 seconds\n",
      "Fit ARIMA: order=(2, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1839.531, BIC=1848.801, Fit time=0.101 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1839.466, BIC=1848.736, Fit time=0.303 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1841.414, BIC=1853.001, Fit time=0.344 seconds\n",
      "Total fit time: 1.748 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2111.267, BIC=2122.854, Fit time=0.190 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2142.716, BIC=2147.351, Fit time=0.026 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2122.983, BIC=2132.252, Fit time=0.118 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2111.288, BIC=2120.558, Fit time=0.140 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2112.541, BIC=2126.446, Fit time=0.243 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2133.454, BIC=2142.724, Fit time=0.106 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2112.658, BIC=2126.563, Fit time=0.339 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2114.749, BIC=2130.972, Fit time=1.133 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2111.712, BIC=2125.617, Fit time=0.318 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2112.625, BIC=2121.895, Fit time=0.110 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2114.286, BIC=2128.191, Fit time=0.242 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2113.137, BIC=2120.089, Fit time=0.084 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2115.414, BIC=2131.636, Fit time=0.612 seconds\n",
      "Total fit time: 3.670 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2440.183, BIC=2451.770, Fit time=0.200 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2482.586, BIC=2487.221, Fit time=0.030 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2450.985, BIC=2460.255, Fit time=0.093 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2438.317, BIC=2447.587, Fit time=0.140 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2439.977, BIC=2451.565, Fit time=0.243 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2478.167, BIC=2485.119, Fit time=0.051 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2440.083, BIC=2451.670, Fit time=0.250 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2439.988, BIC=2453.893, Fit time=0.485 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2451.804, BIC=2458.756, Fit time=0.096 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2436.870, BIC=2448.457, Fit time=0.188 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2428.651, BIC=2444.873, Fit time=0.545 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2430.578, BIC=2449.118, Fit time=0.756 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 0, 6); AIC=2474.917, BIC=2488.822, Fit time=0.629 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2430.602, BIC=2449.142, Fit time=1.010 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 2, 6); AIC=2429.560, BIC=2450.417, Fit time=1.227 seconds\n",
      "Fit ARIMA: order=(0, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2429.556, BIC=2443.460, Fit time=0.285 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2428.792, BIC=2447.332, Fit time=0.758 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2433.125, BIC=2447.030, Fit time=0.830 seconds\n",
      "Total fit time: 7.832 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2100.728, BIC=2112.315, Fit time=0.575 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2104.965, BIC=2109.600, Fit time=0.018 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2105.059, BIC=2114.329, Fit time=0.118 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2105.281, BIC=2114.551, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2102.670, BIC=2116.575, Fit time=0.853 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2108.888, BIC=2118.158, Fit time=0.106 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2102.651, BIC=2116.556, Fit time=0.862 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2104.170, BIC=2120.392, Fit time=2.231 seconds\n",
      "Fit ARIMA: order=(2, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2101.927, BIC=2115.832, Fit time=0.932 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2105.175, BIC=2114.445, Fit time=0.086 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2102.022, BIC=2115.927, Fit time=0.608 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2103.306, BIC=2110.259, Fit time=0.060 seconds\n",
      "Fit ARIMA: order=(2, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2104.002, BIC=2120.225, Fit time=0.709 seconds\n",
      "Total fit time: 7.310 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1556.417, BIC=1568.005, Fit time=0.625 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=1609.220, BIC=1613.855, Fit time=0.016 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=1557.970, BIC=1567.240, Fit time=0.390 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=1546.569, BIC=1555.839, Fit time=0.694 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=1553.163, BIC=1564.750, Fit time=1.046 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=1589.234, BIC=1596.187, Fit time=0.068 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=1549.725, BIC=1561.313, Fit time=1.047 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=1554.430, BIC=1568.335, Fit time=1.572 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=1586.314, BIC=1593.267, Fit time=0.614 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=1577.921, BIC=1589.508, Fit time=0.200 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=1552.898, BIC=1566.803, Fit time=0.901 seconds\n",
      "Total fit time: 7.192 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    }
   ],
   "source": [
    "cor = data.corr()\n",
    "ECM_ARIMA={}\n",
    "ECM_VEC={}\n",
    "ECM_HWES={}\n",
    "\n",
    "n_obs=5\n",
    "\n",
    "for i in cor.columns:\n",
    "    cor_target = abs(cor.loc[:,i])\n",
    "    relevant_features = cor_target[(cor_target>cor.iloc[:,0].median())&(cor_target<cor.iloc[:,0].quantile(0.9))]\n",
    "    try:\n",
    "        if len(relevant_features.index.to_list())>3:\n",
    "            relevant_features=relevant_features.sort_values(ascending=False)[:3]\n",
    "            ecm=series_prediction(data[[i]+relevant_features.index.to_list()], n_obs=n_obs)\n",
    "            ECM_VEC[i]=ecm\n",
    "        elif len(relevant_features.index.to_list())>1:\n",
    "            relevant_features=relevant_features\n",
    "            ecm=series_prediction(data[[i]+relevant_features.index.to_list()], n_obs=n_obs)\n",
    "            ECM_VEC[i]=ecm            \n",
    "            print(i)\n",
    "            \n",
    "        else:\n",
    "            pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "for i in data.columns:\n",
    "    ecm=series_prediction(data[i], n_obs=n_obs, method='arima')\n",
    "    ecm1=series_prediction(data[i], n_obs=n_obs, method='HWES')\n",
    "    ECM_ARIMA[i] = ecm\n",
    "    ECM_HWES[i] = ecm1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ARIMA</th>\n",
       "      <th>VEC</th>\n",
       "      <th>HWES</th>\n",
       "      <th>Model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>4.116715e+06</td>\n",
       "      <td>3.689075e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</td>\n",
       "      <td>3.771287e+07</td>\n",
       "      <td>1.464170e+09</td>\n",
       "      <td>1.725529e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</td>\n",
       "      <td>8.930275e+04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.544834e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</td>\n",
       "      <td>1.917680e+07</td>\n",
       "      <td>5.513037e+07</td>\n",
       "      <td>1.559125e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.655041e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.</td>\n",
       "      <td>2.533771e+06</td>\n",
       "      <td>1.067609e+12</td>\n",
       "      <td>2.220916e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>2.306047e+07</td>\n",
       "      <td>1.332507e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ</td>\n",
       "      <td>1.949620e+07</td>\n",
       "      <td>1.658655e+08</td>\n",
       "      <td>1.151846e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL</td>\n",
       "      <td>5.607880e+06</td>\n",
       "      <td>4.994301e+07</td>\n",
       "      <td>3.594308e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L</td>\n",
       "      <td>2.920520e+06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.892734e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ALIMENTOS_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>6.098485e+07</td>\n",
       "      <td>1.091598e+07</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_DEL_HOGAR_otros</td>\n",
       "      <td>1.998717e+04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.508187e+04</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA.</td>\n",
       "      <td>1.994262e+06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.092462e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_HOGAR_otros</td>\n",
       "      <td>1.798079e+07</td>\n",
       "      <td>1.734129e+09</td>\n",
       "      <td>7.898587e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_COMPAIA</td>\n",
       "      <td>9.347412e+06</td>\n",
       "      <td>1.277497e+07</td>\n",
       "      <td>6.133098e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_EL_TRECE_S.A.S</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>5.703741e+07</td>\n",
       "      <td>3.812709e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A</td>\n",
       "      <td>3.187945e+06</td>\n",
       "      <td>5.584588e+06</td>\n",
       "      <td>1.196391e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ASEO_PERSONAL_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>1.027364e+07</td>\n",
       "      <td>7.475602e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A</td>\n",
       "      <td>1.537490e+07</td>\n",
       "      <td>4.619380e+07</td>\n",
       "      <td>3.113227e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS_S.A.</td>\n",
       "      <td>6.112560e+06</td>\n",
       "      <td>4.070319e+08</td>\n",
       "      <td>2.404969e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BEBIDAS_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>2.633737e+08</td>\n",
       "      <td>3.097856e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S</td>\n",
       "      <td>4.718901e+06</td>\n",
       "      <td>1.897863e+07</td>\n",
       "      <td>3.004385e+06</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBIA_S.A</td>\n",
       "      <td>2.513175e+06</td>\n",
       "      <td>3.084838e+06</td>\n",
       "      <td>7.549562e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>CONFITERIA_Y_SNACKS_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>1.656927e+08</td>\n",
       "      <td>9.942241e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>CONFITERIA_otros</td>\n",
       "      <td>1.243836e+06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.142821e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>DETERGENTE_PARA_ROPA_otros</td>\n",
       "      <td>9.090705e+05</td>\n",
       "      <td>9.860263e+10</td>\n",
       "      <td>4.553737e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MASCOTAS_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.955449e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MEDICAMENTOS_otros</td>\n",
       "      <td>6.075192e+05</td>\n",
       "      <td>6.746505e+06</td>\n",
       "      <td>2.898174e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MUNDO_BEBES_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.258526e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>MUNDO_BEBE_otros</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.168129e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>OTRAS_CATEGORIAS_otros</td>\n",
       "      <td>2.875462e+05</td>\n",
       "      <td>4.743367e+07</td>\n",
       "      <td>4.125667e+05</td>\n",
       "      <td>ARIMA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Otros</td>\n",
       "      <td>2.267374e+04</td>\n",
       "      <td>3.194667e+08</td>\n",
       "      <td>3.617464e+05</td>\n",
       "      <td>ARIMA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>SALUD_Y_BIENESTAR_otros</td>\n",
       "      <td>9.905285e+05</td>\n",
       "      <td>1.960703e+07</td>\n",
       "      <td>5.461462e+05</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>_BEBIDAS_otros</td>\n",
       "      <td>2.933503e+04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.732320e+04</td>\n",
       "      <td>HWES</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                           ARIMA  \\\n",
       "ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBI...  1.000000e+09   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...  3.771287e+07   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...  8.930275e+04   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...  1.917680e+07   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...  1.000000e+09   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUET...  2.533771e+06   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ...  1.000000e+09   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTO...  1.949620e+07   \n",
       "ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL         5.607880e+06   \n",
       "ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAI...  2.920520e+06   \n",
       "ALIMENTOS_otros                                     1.000000e+09   \n",
       "ASEO_DEL_HOGAR_otros                                1.998717e+04   \n",
       "ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA.         1.994262e+06   \n",
       "ASEO_HOGAR_otros                                    1.798079e+07   \n",
       "ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_CO...  9.347412e+06   \n",
       "ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_...  1.000000e+09   \n",
       "ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A    3.187945e+06   \n",
       "ASEO_PERSONAL_otros                                 1.000000e+09   \n",
       "BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A     1.537490e+07   \n",
       "BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS...  6.112560e+06   \n",
       "BEBIDAS_otros                                       1.000000e+09   \n",
       "CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S           4.718901e+06   \n",
       "CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBI...  2.513175e+06   \n",
       "CONFITERIA_Y_SNACKS_otros                           1.000000e+09   \n",
       "CONFITERIA_otros                                    1.243836e+06   \n",
       "DETERGENTE_PARA_ROPA_otros                          9.090705e+05   \n",
       "MASCOTAS_otros                                      1.000000e+09   \n",
       "MEDICAMENTOS_otros                                  6.075192e+05   \n",
       "MUNDO_BEBES_otros                                   1.000000e+09   \n",
       "MUNDO_BEBE_otros                                    1.000000e+09   \n",
       "OTRAS_CATEGORIAS_otros                              2.875462e+05   \n",
       "Otros                                               2.267374e+04   \n",
       "SALUD_Y_BIENESTAR_otros                             9.905285e+05   \n",
       "_BEBIDAS_otros                                      2.933503e+04   \n",
       "\n",
       "                                                             VEC  \\\n",
       "ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBI...  4.116715e+06   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...  1.464170e+09   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...           NaN   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...  5.513037e+07   \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...           NaN   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUET...  1.067609e+12   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ...  2.306047e+07   \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTO...  1.658655e+08   \n",
       "ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL         4.994301e+07   \n",
       "ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAI...           NaN   \n",
       "ALIMENTOS_otros                                     6.098485e+07   \n",
       "ASEO_DEL_HOGAR_otros                                         NaN   \n",
       "ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA.                  NaN   \n",
       "ASEO_HOGAR_otros                                    1.734129e+09   \n",
       "ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_CO...  1.277497e+07   \n",
       "ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_...  5.703741e+07   \n",
       "ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A    5.584588e+06   \n",
       "ASEO_PERSONAL_otros                                 1.027364e+07   \n",
       "BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A     4.619380e+07   \n",
       "BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS...  4.070319e+08   \n",
       "BEBIDAS_otros                                       2.633737e+08   \n",
       "CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S           1.897863e+07   \n",
       "CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBI...  3.084838e+06   \n",
       "CONFITERIA_Y_SNACKS_otros                           1.656927e+08   \n",
       "CONFITERIA_otros                                             NaN   \n",
       "DETERGENTE_PARA_ROPA_otros                          9.860263e+10   \n",
       "MASCOTAS_otros                                               NaN   \n",
       "MEDICAMENTOS_otros                                  6.746505e+06   \n",
       "MUNDO_BEBES_otros                                            NaN   \n",
       "MUNDO_BEBE_otros                                             NaN   \n",
       "OTRAS_CATEGORIAS_otros                              4.743367e+07   \n",
       "Otros                                               3.194667e+08   \n",
       "SALUD_Y_BIENESTAR_otros                             1.960703e+07   \n",
       "_BEBIDAS_otros                                               NaN   \n",
       "\n",
       "                                                            HWES  Model  \n",
       "ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBI...  3.689075e+06   HWES  \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_...  1.725529e+07   HWES  \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESM...  1.544834e+06   HWES  \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA...  1.559125e+07   HWES  \n",
       "ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_RO...  5.655041e+07   HWES  \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUET...  2.220916e+06   HWES  \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ...  1.332507e+07   HWES  \n",
       "ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTO...  1.151846e+07   HWES  \n",
       "ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL         3.594308e+06   HWES  \n",
       "ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAI...  9.892734e+05   HWES  \n",
       "ALIMENTOS_otros                                     1.091598e+07   HWES  \n",
       "ASEO_DEL_HOGAR_otros                                1.508187e+04   HWES  \n",
       "ASEO_HOGAR_JABON_EN_BARRA_DETERGENTES_LTDA.         1.092462e+06   HWES  \n",
       "ASEO_HOGAR_otros                                    7.898587e+06   HWES  \n",
       "ASEO_PERSONAL_CREMA_DENTAL_COLGATE_PALMOLIVE_CO...  6.133098e+06   HWES  \n",
       "ASEO_PERSONAL_OTROS_ASEO_PERSONAL_EMPAQUETADOS_...  3.812709e+06   HWES  \n",
       "ASEO_PERSONAL_PAPEL_HIGIENICO_DRYPERS_ANDINA_S.A    1.196391e+06   HWES  \n",
       "ASEO_PERSONAL_otros                                 7.475602e+06   HWES  \n",
       "BEBIDAS_CAF_MOLIDO_COMERCIALIZADORA_PROCON_S.A     3.113227e+06   HWES  \n",
       "BEBIDAS_GASEOSAS_INDUSTRIA_NACIONAL_DE_GASEOSAS...  2.404969e+06   HWES  \n",
       "BEBIDAS_otros                                       3.097856e+06   HWES  \n",
       "CONFITERIA_PASABOCAS_PRODUCTOS_YUPI_S.A.S           3.004385e+06   HWES  \n",
       "CONFITERIA_Y_SNACKS_CEREALES_KELLOGG_DE_COLOMBI...  7.549562e+05   HWES  \n",
       "CONFITERIA_Y_SNACKS_otros                           9.942241e+05   HWES  \n",
       "CONFITERIA_otros                                    6.142821e+05   HWES  \n",
       "DETERGENTE_PARA_ROPA_otros                          4.553737e+05   HWES  \n",
       "MASCOTAS_otros                                      3.955449e+05   HWES  \n",
       "MEDICAMENTOS_otros                                  2.898174e+05   HWES  \n",
       "MUNDO_BEBES_otros                                   1.258526e+05   HWES  \n",
       "MUNDO_BEBE_otros                                    1.168129e+05   HWES  \n",
       "OTRAS_CATEGORIAS_otros                              4.125667e+05  ARIMA  \n",
       "Otros                                               3.617464e+05  ARIMA  \n",
       "SALUD_Y_BIENESTAR_otros                             5.461462e+05   HWES  \n",
       "_BEBIDAS_otros                                      1.732320e+04   HWES  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ECM_arima = pd.DataFrame(ECM_ARIMA,index=[0]).T\n",
    "ECM_arima.rename(columns={0:'ARIMA'}, inplace=True)\n",
    "ECM_vec = pd.DataFrame(ECM_VEC,index=[0]).T\n",
    "ECM_vec.rename(columns={0:'VEC'}, inplace=True)\n",
    "ECM_hwes = pd.DataFrame(ECM_HWES,index=[0]).T\n",
    "ECM_hwes.rename(columns={0:'HWES'}, inplace=True)\n",
    "ECM = ECM_arima.merge(ECM_vec,left_index=True, right_index=True,how='left').merge(ECM_hwes,left_index=True, right_index=True,how='left')\n",
    "ECM['Model']=np.where((ECM['ARIMA'].isna()==False) & (ECM['VEC'].isna()==True) & (ECM['HWES'].isna()==True), 'ARIMA',\n",
    "                     np.where((ECM['ARIMA'].isna()==True) & (ECM['VEC'].isna()==False) & (ECM['HWES'].isna()==True), 'VEC',\n",
    "                     np.where((ECM['ARIMA'].isna()==True) & (ECM['VEC'].isna()==True) & (ECM['HWES'].isna()==False), 'HWES',\n",
    "                              np.where((ECM['ARIMA']<ECM['VEC']) & (ECM['ARIMA']<ECM['HWES']),'ARIMA',\n",
    "                              np.where((ECM['VEC']<ECM['ARIMA']) & (ECM['VEC']<ECM['HWES']),'VEC','HWES')))))\n",
    "ECM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2251.640, BIC=2263.550, Fit time=0.152 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2286.872, BIC=2291.637, Fit time=0.017 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2263.907, BIC=2273.435, Fit time=0.135 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2251.242, BIC=2260.770, Fit time=0.126 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2252.251, BIC=2264.161, Fit time=0.157 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2282.641, BIC=2289.788, Fit time=0.050 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2252.234, BIC=2264.144, Fit time=0.295 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2254.221, BIC=2268.513, Fit time=0.669 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2253.187, BIC=2260.333, Fit time=0.053 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2251.587, BIC=2263.497, Fit time=0.150 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2253.212, BIC=2267.505, Fit time=0.259 seconds\n",
      "Total fit time: 2.081 seconds\n",
      "Fit ARIMA: order=(1, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2596.918, BIC=2608.828, Fit time=0.203 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 0, 6); AIC=2642.673, BIC=2647.437, Fit time=0.015 seconds\n",
      "Fit ARIMA: order=(1, 1, 0) seasonal_order=(1, 1, 0, 6); AIC=2608.737, BIC=2618.265, Fit time=0.095 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 1, 6); AIC=2595.027, BIC=2604.555, Fit time=0.153 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 1, 6); AIC=2596.698, BIC=2608.608, Fit time=0.257 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 0, 6); AIC=2637.913, BIC=2645.059, Fit time=0.048 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(0, 1, 2, 6); AIC=2596.805, BIC=2608.715, Fit time=0.253 seconds\n",
      "Fit ARIMA: order=(0, 1, 1) seasonal_order=(1, 1, 2, 6); AIC=2596.571, BIC=2610.864, Fit time=0.466 seconds\n",
      "Fit ARIMA: order=(0, 1, 0) seasonal_order=(0, 1, 1, 6); AIC=2609.647, BIC=2616.793, Fit time=0.098 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(0, 1, 1, 6); AIC=2593.395, BIC=2605.305, Fit time=0.177 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 1, 6); AIC=2584.653, BIC=2601.327, Fit time=0.533 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 1, 6); AIC=2586.612, BIC=2605.669, Fit time=0.773 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 0, 6); AIC=2634.607, BIC=2648.899, Fit time=0.730 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(0, 1, 2, 6); AIC=2586.631, BIC=2605.687, Fit time=0.994 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(1, 1, 2, 6); AIC=2580.849, BIC=2602.287, Fit time=2.121 seconds\n",
      "Fit ARIMA: order=(0, 1, 3) seasonal_order=(1, 1, 2, 6); AIC=2583.836, BIC=2602.892, Fit time=0.741 seconds\n",
      "Fit ARIMA: order=(2, 1, 3) seasonal_order=(1, 1, 2, 6); AIC=2581.812, BIC=2605.632, Fit time=1.503 seconds\n",
      "Fit ARIMA: order=(1, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2590.474, BIC=2609.530, Fit time=1.049 seconds\n",
      "Fit ARIMA: order=(0, 1, 2) seasonal_order=(1, 1, 2, 6); AIC=2593.927, BIC=2610.601, Fit time=0.583 seconds\n",
      "Fit ARIMA: order=(1, 1, 3) seasonal_order=(2, 1, 2, 6); AIC=2581.762, BIC=2605.582, Fit time=2.269 seconds\n",
      "Total fit time: 13.087 seconds\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:429: FutureWarning: After 0.13 initialization must be handled at model creation\n",
      "  FutureWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n",
      "C:\\Users\\camil\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\holtwinters\\model.py:922: ConvergenceWarning: Optimization failed to converge. Check mle_retvals.\n",
      "  ConvergenceWarning,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ</th>\n",
       "      <th>ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL</th>\n",
       "      <th>ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L</th>\n",
       "      <th>...</th>\n",
       "      <th>CONFITERIA_otros</th>\n",
       "      <th>DETERGENTE_PARA_ROPA_otros</th>\n",
       "      <th>MASCOTAS_otros</th>\n",
       "      <th>MEDICAMENTOS_otros</th>\n",
       "      <th>MUNDO_BEBES_otros</th>\n",
       "      <th>MUNDO_BEBE_otros</th>\n",
       "      <th>OTRAS_CATEGORIAS_otros</th>\n",
       "      <th>Otros</th>\n",
       "      <th>SALUD_Y_BIENESTAR_otros</th>\n",
       "      <th>_BEBIDAS_otros</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.808284e+06</td>\n",
       "      <td>3.913721e+07</td>\n",
       "      <td>2.081108e+06</td>\n",
       "      <td>3.433013e+07</td>\n",
       "      <td>9.436082e+07</td>\n",
       "      <td>6.446926e+06</td>\n",
       "      <td>2.050764e+07</td>\n",
       "      <td>5.473234e+07</td>\n",
       "      <td>3.624092e+06</td>\n",
       "      <td>4.703418e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.249861e+06</td>\n",
       "      <td>1.401119e+06</td>\n",
       "      <td>1.470064e+06</td>\n",
       "      <td>702036.185214</td>\n",
       "      <td>333802.766712</td>\n",
       "      <td>315773.044171</td>\n",
       "      <td>625950.995345</td>\n",
       "      <td>-4.045090e+05</td>\n",
       "      <td>1.504037e+07</td>\n",
       "      <td>21779.605272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>3.556851e+06</td>\n",
       "      <td>3.212743e+07</td>\n",
       "      <td>1.090861e+06</td>\n",
       "      <td>2.906389e+07</td>\n",
       "      <td>5.239645e+07</td>\n",
       "      <td>6.447547e+06</td>\n",
       "      <td>2.467161e+07</td>\n",
       "      <td>5.604804e+07</td>\n",
       "      <td>3.493767e+06</td>\n",
       "      <td>4.176213e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.199768e+06</td>\n",
       "      <td>1.401103e+06</td>\n",
       "      <td>1.486898e+06</td>\n",
       "      <td>713482.790975</td>\n",
       "      <td>329354.781902</td>\n",
       "      <td>289163.869116</td>\n",
       "      <td>434097.811101</td>\n",
       "      <td>-5.990003e+05</td>\n",
       "      <td>2.942210e+06</td>\n",
       "      <td>21773.808864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2.285089e+06</td>\n",
       "      <td>4.007103e+07</td>\n",
       "      <td>9.014683e+05</td>\n",
       "      <td>2.120793e+07</td>\n",
       "      <td>6.531178e+07</td>\n",
       "      <td>6.450994e+06</td>\n",
       "      <td>2.909284e+07</td>\n",
       "      <td>1.336809e+08</td>\n",
       "      <td>3.213300e+06</td>\n",
       "      <td>4.387915e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>3.019780e+06</td>\n",
       "      <td>1.401098e+06</td>\n",
       "      <td>1.503899e+06</td>\n",
       "      <td>758700.468021</td>\n",
       "      <td>331285.899840</td>\n",
       "      <td>300700.649592</td>\n",
       "      <td>445395.324119</td>\n",
       "      <td>-4.828489e+05</td>\n",
       "      <td>2.064760e+06</td>\n",
       "      <td>21775.270932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>5.607031e+06</td>\n",
       "      <td>3.906853e+07</td>\n",
       "      <td>1.223545e+06</td>\n",
       "      <td>4.357390e+07</td>\n",
       "      <td>5.745151e+07</td>\n",
       "      <td>6.448786e+06</td>\n",
       "      <td>3.421129e+07</td>\n",
       "      <td>7.677881e+07</td>\n",
       "      <td>5.026106e+06</td>\n",
       "      <td>4.672382e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.158311e+06</td>\n",
       "      <td>1.401282e+06</td>\n",
       "      <td>1.520679e+06</td>\n",
       "      <td>786145.126463</td>\n",
       "      <td>333223.177896</td>\n",
       "      <td>312274.425295</td>\n",
       "      <td>365778.273978</td>\n",
       "      <td>-8.867942e+05</td>\n",
       "      <td>2.177413e+06</td>\n",
       "      <td>21775.288515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4.137112e+06</td>\n",
       "      <td>3.579619e+07</td>\n",
       "      <td>1.802444e+06</td>\n",
       "      <td>5.366987e+07</td>\n",
       "      <td>7.176398e+07</td>\n",
       "      <td>6.451371e+06</td>\n",
       "      <td>3.062085e+07</td>\n",
       "      <td>1.295705e+08</td>\n",
       "      <td>6.584705e+06</td>\n",
       "      <td>4.252838e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.567258e+06</td>\n",
       "      <td>1.401221e+06</td>\n",
       "      <td>1.537563e+06</td>\n",
       "      <td>778281.891934</td>\n",
       "      <td>334038.652464</td>\n",
       "      <td>317140.686945</td>\n",
       "      <td>444158.525047</td>\n",
       "      <td>-1.234418e+06</td>\n",
       "      <td>2.067120e+06</td>\n",
       "      <td>21775.306098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>4.112852e+06</td>\n",
       "      <td>3.568899e+07</td>\n",
       "      <td>1.980747e+06</td>\n",
       "      <td>3.397976e+07</td>\n",
       "      <td>6.258268e+07</td>\n",
       "      <td>6.456395e+06</td>\n",
       "      <td>5.160271e+07</td>\n",
       "      <td>2.281834e+08</td>\n",
       "      <td>4.895406e+06</td>\n",
       "      <td>7.746566e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.576685e+06</td>\n",
       "      <td>1.401271e+06</td>\n",
       "      <td>1.554436e+06</td>\n",
       "      <td>770942.164074</td>\n",
       "      <td>346101.195983</td>\n",
       "      <td>389260.040858</td>\n",
       "      <td>489400.348370</td>\n",
       "      <td>-1.950079e+06</td>\n",
       "      <td>1.650912e+06</td>\n",
       "      <td>21775.323681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>5.598344e+06</td>\n",
       "      <td>3.558932e+07</td>\n",
       "      <td>3.357345e+06</td>\n",
       "      <td>3.927521e+07</td>\n",
       "      <td>4.856190e+07</td>\n",
       "      <td>6.453358e+06</td>\n",
       "      <td>3.526151e+07</td>\n",
       "      <td>1.914898e+08</td>\n",
       "      <td>4.540844e+06</td>\n",
       "      <td>4.111741e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.156552e+06</td>\n",
       "      <td>1.401796e+06</td>\n",
       "      <td>1.571358e+06</td>\n",
       "      <td>773554.807145</td>\n",
       "      <td>335297.918472</td>\n",
       "      <td>324650.371675</td>\n",
       "      <td>532575.167710</td>\n",
       "      <td>-2.211225e+06</td>\n",
       "      <td>2.848066e+06</td>\n",
       "      <td>21773.898933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>2.814858e+06</td>\n",
       "      <td>3.766137e+07</td>\n",
       "      <td>3.423185e+06</td>\n",
       "      <td>3.821715e+07</td>\n",
       "      <td>5.058604e+07</td>\n",
       "      <td>6.451125e+06</td>\n",
       "      <td>2.980402e+07</td>\n",
       "      <td>1.771837e+08</td>\n",
       "      <td>9.492373e+06</td>\n",
       "      <td>4.682380e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.124881e+06</td>\n",
       "      <td>1.401889e+06</td>\n",
       "      <td>1.588148e+06</td>\n",
       "      <td>832079.575631</td>\n",
       "      <td>344117.446532</td>\n",
       "      <td>377376.118774</td>\n",
       "      <td>337777.367428</td>\n",
       "      <td>-2.763986e+06</td>\n",
       "      <td>1.393461e+06</td>\n",
       "      <td>21773.918865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.  \\\n",
       "0                                       1.808284e+06       \n",
       "1                                       3.556851e+06       \n",
       "2                                       2.285089e+06       \n",
       "3                                       5.607031e+06       \n",
       "4                                       4.137112e+06       \n",
       "5                                       4.112852e+06       \n",
       "6                                       5.598344e+06       \n",
       "7                                       2.814858e+06       \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.  \\\n",
       "0                                       3.913721e+07                 \n",
       "1                                       3.212743e+07                 \n",
       "2                                       4.007103e+07                 \n",
       "3                                       3.906853e+07                 \n",
       "4                                       3.579619e+07                 \n",
       "5                                       3.568899e+07                 \n",
       "6                                       3.558932e+07                 \n",
       "7                                       3.766137e+07                 \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S  \\\n",
       "0                                       2.081108e+06             \n",
       "1                                       1.090861e+06             \n",
       "2                                       9.014683e+05             \n",
       "3                                       1.223545e+06             \n",
       "4                                       1.802444e+06             \n",
       "5                                       1.980747e+06             \n",
       "6                                       3.357345e+06             \n",
       "7                                       3.423185e+06             \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A  \\\n",
       "0                                       3.433013e+07     \n",
       "1                                       2.906389e+07     \n",
       "2                                       2.120793e+07     \n",
       "3                                       4.357390e+07     \n",
       "4                                       5.366987e+07     \n",
       "5                                       3.397976e+07     \n",
       "6                                       3.927521e+07     \n",
       "7                                       3.821715e+07     \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A  \\\n",
       "0                                       9.436082e+07      \n",
       "1                                       5.239645e+07      \n",
       "2                                       6.531178e+07      \n",
       "3                                       5.745151e+07      \n",
       "4                                       7.176398e+07      \n",
       "5                                       6.258268e+07      \n",
       "6                                       4.856190e+07      \n",
       "7                                       5.058604e+07      \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.  \\\n",
       "0                                       6.446926e+06                 \n",
       "1                                       6.447547e+06                 \n",
       "2                                       6.450994e+06                 \n",
       "3                                       6.448786e+06                 \n",
       "4                                       6.451371e+06                 \n",
       "5                                       6.456395e+06                 \n",
       "6                                       6.453358e+06                 \n",
       "7                                       6.451125e+06                 \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A  \\\n",
       "0                                       2.050764e+07     \n",
       "1                                       2.467161e+07     \n",
       "2                                       2.909284e+07     \n",
       "3                                       3.421129e+07     \n",
       "4                                       3.062085e+07     \n",
       "5                                       5.160271e+07     \n",
       "6                                       3.526151e+07     \n",
       "7                                       2.980402e+07     \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ  \\\n",
       "0                                       5.473234e+07                 \n",
       "1                                       5.604804e+07                 \n",
       "2                                       1.336809e+08                 \n",
       "3                                       7.677881e+07                 \n",
       "4                                       1.295705e+08                 \n",
       "5                                       2.281834e+08                 \n",
       "6                                       1.914898e+08                 \n",
       "7                                       1.771837e+08                 \n",
       "\n",
       "   ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL  \\\n",
       "0                                 3.624092e+06   \n",
       "1                                 3.493767e+06   \n",
       "2                                 3.213300e+06   \n",
       "3                                 5.026106e+06   \n",
       "4                                 6.584705e+06   \n",
       "5                                 4.895406e+06   \n",
       "6                                 4.540844e+06   \n",
       "7                                 9.492373e+06   \n",
       "\n",
       "   ALIMENTOS_ENLATADOS,_SALSAS_Y_CONSERVAS_COMPAIA_NACIONAL_DE_L  ...  \\\n",
       "0                                       4.703418e+06               ...   \n",
       "1                                       4.176213e+06               ...   \n",
       "2                                       4.387915e+06               ...   \n",
       "3                                       4.672382e+06               ...   \n",
       "4                                       4.252838e+06               ...   \n",
       "5                                       7.746566e+06               ...   \n",
       "6                                       4.111741e+06               ...   \n",
       "7                                       4.682380e+06               ...   \n",
       "\n",
       "   CONFITERIA_otros  DETERGENTE_PARA_ROPA_otros  MASCOTAS_otros  \\\n",
       "0      2.249861e+06                1.401119e+06    1.470064e+06   \n",
       "1      2.199768e+06                1.401103e+06    1.486898e+06   \n",
       "2      3.019780e+06                1.401098e+06    1.503899e+06   \n",
       "3      2.158311e+06                1.401282e+06    1.520679e+06   \n",
       "4      2.567258e+06                1.401221e+06    1.537563e+06   \n",
       "5      2.576685e+06                1.401271e+06    1.554436e+06   \n",
       "6      2.156552e+06                1.401796e+06    1.571358e+06   \n",
       "7      2.124881e+06                1.401889e+06    1.588148e+06   \n",
       "\n",
       "   MEDICAMENTOS_otros  MUNDO_BEBES_otros  MUNDO_BEBE_otros  \\\n",
       "0       702036.185214      333802.766712     315773.044171   \n",
       "1       713482.790975      329354.781902     289163.869116   \n",
       "2       758700.468021      331285.899840     300700.649592   \n",
       "3       786145.126463      333223.177896     312274.425295   \n",
       "4       778281.891934      334038.652464     317140.686945   \n",
       "5       770942.164074      346101.195983     389260.040858   \n",
       "6       773554.807145      335297.918472     324650.371675   \n",
       "7       832079.575631      344117.446532     377376.118774   \n",
       "\n",
       "   OTRAS_CATEGORIAS_otros         Otros  SALUD_Y_BIENESTAR_otros  \\\n",
       "0           625950.995345 -4.045090e+05             1.504037e+07   \n",
       "1           434097.811101 -5.990003e+05             2.942210e+06   \n",
       "2           445395.324119 -4.828489e+05             2.064760e+06   \n",
       "3           365778.273978 -8.867942e+05             2.177413e+06   \n",
       "4           444158.525047 -1.234418e+06             2.067120e+06   \n",
       "5           489400.348370 -1.950079e+06             1.650912e+06   \n",
       "6           532575.167710 -2.211225e+06             2.848066e+06   \n",
       "7           337777.367428 -2.763986e+06             1.393461e+06   \n",
       "\n",
       "   _BEBIDAS_otros  \n",
       "0    21779.605272  \n",
       "1    21773.808864  \n",
       "2    21775.270932  \n",
       "3    21775.288515  \n",
       "4    21775.306098  \n",
       "5    21775.323681  \n",
       "6    21773.898933  \n",
       "7    21773.918865  \n",
       "\n",
       "[8 rows x 34 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions=[]\n",
    "n_obs=8\n",
    "\n",
    "for i in cor.columns:\n",
    "    model = ECM.loc[i,'Model']\n",
    "    if model == 'VEC':        \n",
    "        cor_target = abs(cor.loc[:,i])\n",
    "        relevant_features = cor_target[(cor_target>cor.iloc[:,0].median())&(cor_target<cor.iloc[:,0].quantile(0.9))]\n",
    "        if len(relevant_features.index.to_list())>3:\n",
    "            relevant_features=relevant_features.sort_values(ascending=False)[:3]\n",
    "            pred=series_prediction(data[[i]+relevant_features.index.to_list()], n_obs=n_obs,how='pred')\n",
    "            predictions.append(pred[i])\n",
    "        else:\n",
    "            relevant_features=relevant_features\n",
    "            pred=series_prediction(data[[i]+relevant_features.index.to_list()], n_obs=n_obs,how='pred')\n",
    "            predictions.append(pred[i])\n",
    "    if model == 'HWES':\n",
    "        pred=series_prediction(data[i], n_obs=n_obs, method='HWES',how='pred')\n",
    "        predictions.append(pred)        \n",
    "    else:\n",
    "        pred=series_prediction(data[i], n_obs=n_obs, method='arima',how='pred')\n",
    "        predictions.append(pred)\n",
    "    \n",
    "predictions=pd.concat(predictions,axis=1)\n",
    "DATA=predictions\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine\n",
    "from datetime import datetime, timedelta\n",
    "import time\n",
    "from io import StringIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A</th>\n",
       "      <th>ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A</th>\n",
       "      <th>ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ</th>\n",
       "      <th>ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL</th>\n",
       "      <th>...</th>\n",
       "      <th>CONFITERIA_otros</th>\n",
       "      <th>DETERGENTE_PARA_ROPA_otros</th>\n",
       "      <th>MASCOTAS_otros</th>\n",
       "      <th>MEDICAMENTOS_otros</th>\n",
       "      <th>MUNDO_BEBES_otros</th>\n",
       "      <th>MUNDO_BEBE_otros</th>\n",
       "      <th>OTRAS_CATEGORIAS_otros</th>\n",
       "      <th>Otros</th>\n",
       "      <th>SALUD_Y_BIENESTAR_otros</th>\n",
       "      <th>_BEBIDAS_otros</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.808284e+06</td>\n",
       "      <td>3.913721e+07</td>\n",
       "      <td>2.081108e+06</td>\n",
       "      <td>3.433013e+07</td>\n",
       "      <td>9.436082e+07</td>\n",
       "      <td>6.446926e+06</td>\n",
       "      <td>2.050764e+07</td>\n",
       "      <td>5.473234e+07</td>\n",
       "      <td>3.624092e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.249861e+06</td>\n",
       "      <td>1.401119e+06</td>\n",
       "      <td>1.470064e+06</td>\n",
       "      <td>702036.185214</td>\n",
       "      <td>333802.766712</td>\n",
       "      <td>315773.044171</td>\n",
       "      <td>625950.995345</td>\n",
       "      <td>-4.045090e+05</td>\n",
       "      <td>1.504037e+07</td>\n",
       "      <td>21779.605272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.556851e+06</td>\n",
       "      <td>3.212743e+07</td>\n",
       "      <td>1.090861e+06</td>\n",
       "      <td>2.906389e+07</td>\n",
       "      <td>5.239645e+07</td>\n",
       "      <td>6.447547e+06</td>\n",
       "      <td>2.467161e+07</td>\n",
       "      <td>5.604804e+07</td>\n",
       "      <td>3.493767e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.199768e+06</td>\n",
       "      <td>1.401103e+06</td>\n",
       "      <td>1.486898e+06</td>\n",
       "      <td>713482.790975</td>\n",
       "      <td>329354.781902</td>\n",
       "      <td>289163.869116</td>\n",
       "      <td>434097.811101</td>\n",
       "      <td>-5.990003e+05</td>\n",
       "      <td>2.942210e+06</td>\n",
       "      <td>21773.808864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2.285089e+06</td>\n",
       "      <td>4.007103e+07</td>\n",
       "      <td>9.014683e+05</td>\n",
       "      <td>2.120793e+07</td>\n",
       "      <td>6.531178e+07</td>\n",
       "      <td>6.450994e+06</td>\n",
       "      <td>2.909284e+07</td>\n",
       "      <td>1.336809e+08</td>\n",
       "      <td>3.213300e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>3.019780e+06</td>\n",
       "      <td>1.401098e+06</td>\n",
       "      <td>1.503899e+06</td>\n",
       "      <td>758700.468021</td>\n",
       "      <td>331285.899840</td>\n",
       "      <td>300700.649592</td>\n",
       "      <td>445395.324119</td>\n",
       "      <td>-4.828489e+05</td>\n",
       "      <td>2.064760e+06</td>\n",
       "      <td>21775.270932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5.607031e+06</td>\n",
       "      <td>3.906853e+07</td>\n",
       "      <td>1.223545e+06</td>\n",
       "      <td>4.357390e+07</td>\n",
       "      <td>5.745151e+07</td>\n",
       "      <td>6.448786e+06</td>\n",
       "      <td>3.421129e+07</td>\n",
       "      <td>7.677881e+07</td>\n",
       "      <td>5.026106e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.158311e+06</td>\n",
       "      <td>1.401282e+06</td>\n",
       "      <td>1.520679e+06</td>\n",
       "      <td>786145.126463</td>\n",
       "      <td>333223.177896</td>\n",
       "      <td>312274.425295</td>\n",
       "      <td>365778.273978</td>\n",
       "      <td>-8.867942e+05</td>\n",
       "      <td>2.177413e+06</td>\n",
       "      <td>21775.288515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4.137112e+06</td>\n",
       "      <td>3.579619e+07</td>\n",
       "      <td>1.802444e+06</td>\n",
       "      <td>5.366987e+07</td>\n",
       "      <td>7.176398e+07</td>\n",
       "      <td>6.451371e+06</td>\n",
       "      <td>3.062085e+07</td>\n",
       "      <td>1.295705e+08</td>\n",
       "      <td>6.584705e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.567258e+06</td>\n",
       "      <td>1.401221e+06</td>\n",
       "      <td>1.537563e+06</td>\n",
       "      <td>778281.891934</td>\n",
       "      <td>334038.652464</td>\n",
       "      <td>317140.686945</td>\n",
       "      <td>444158.525047</td>\n",
       "      <td>-1.234418e+06</td>\n",
       "      <td>2.067120e+06</td>\n",
       "      <td>21775.306098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4.112852e+06</td>\n",
       "      <td>3.568899e+07</td>\n",
       "      <td>1.980747e+06</td>\n",
       "      <td>3.397976e+07</td>\n",
       "      <td>6.258268e+07</td>\n",
       "      <td>6.456395e+06</td>\n",
       "      <td>5.160271e+07</td>\n",
       "      <td>2.281834e+08</td>\n",
       "      <td>4.895406e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.576685e+06</td>\n",
       "      <td>1.401271e+06</td>\n",
       "      <td>1.554436e+06</td>\n",
       "      <td>770942.164074</td>\n",
       "      <td>346101.195983</td>\n",
       "      <td>389260.040858</td>\n",
       "      <td>489400.348370</td>\n",
       "      <td>-1.950079e+06</td>\n",
       "      <td>1.650912e+06</td>\n",
       "      <td>21775.323681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5.598344e+06</td>\n",
       "      <td>3.558932e+07</td>\n",
       "      <td>3.357345e+06</td>\n",
       "      <td>3.927521e+07</td>\n",
       "      <td>4.856190e+07</td>\n",
       "      <td>6.453358e+06</td>\n",
       "      <td>3.526151e+07</td>\n",
       "      <td>1.914898e+08</td>\n",
       "      <td>4.540844e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.156552e+06</td>\n",
       "      <td>1.401796e+06</td>\n",
       "      <td>1.571358e+06</td>\n",
       "      <td>773554.807145</td>\n",
       "      <td>335297.918472</td>\n",
       "      <td>324650.371675</td>\n",
       "      <td>532575.167710</td>\n",
       "      <td>-2.211225e+06</td>\n",
       "      <td>2.848066e+06</td>\n",
       "      <td>21773.898933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>2.814858e+06</td>\n",
       "      <td>3.766137e+07</td>\n",
       "      <td>3.423185e+06</td>\n",
       "      <td>3.821715e+07</td>\n",
       "      <td>5.058604e+07</td>\n",
       "      <td>6.451125e+06</td>\n",
       "      <td>2.980402e+07</td>\n",
       "      <td>1.771837e+08</td>\n",
       "      <td>9.492373e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.124881e+06</td>\n",
       "      <td>1.401889e+06</td>\n",
       "      <td>1.588148e+06</td>\n",
       "      <td>832079.575631</td>\n",
       "      <td>344117.446532</td>\n",
       "      <td>377376.118774</td>\n",
       "      <td>337777.367428</td>\n",
       "      <td>-2.763986e+06</td>\n",
       "      <td>1.393461e+06</td>\n",
       "      <td>21773.918865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  ALIMENTOS_ACEITES_Y_VINAGRES_TEAM_FOODS_COLOMBIA_S.A.  \\\n",
       "0      0                                       1.808284e+06       \n",
       "1      1                                       3.556851e+06       \n",
       "2      2                                       2.285089e+06       \n",
       "3      3                                       5.607031e+06       \n",
       "4      4                                       4.137112e+06       \n",
       "5      5                                       4.112852e+06       \n",
       "6      6                                       5.598344e+06       \n",
       "7      7                                       2.814858e+06       \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_AGROINDUSTRIAL_MOLINO_SONORA_A.  \\\n",
       "0                                       3.913721e+07                 \n",
       "1                                       3.212743e+07                 \n",
       "2                                       4.007103e+07                 \n",
       "3                                       3.906853e+07                 \n",
       "4                                       3.579619e+07                 \n",
       "5                                       3.568899e+07                 \n",
       "6                                       3.558932e+07                 \n",
       "7                                       3.766137e+07                 \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROCERA_LA_ESMERALDA_S.A.S  \\\n",
       "0                                       2.081108e+06             \n",
       "1                                       1.090861e+06             \n",
       "2                                       9.014683e+05             \n",
       "3                                       1.223545e+06             \n",
       "4                                       1.802444e+06             \n",
       "5                                       1.980747e+06             \n",
       "6                                       3.357345e+06             \n",
       "7                                       3.423185e+06             \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ARROZ_FLORHUILA_S.A  \\\n",
       "0                                       3.433013e+07     \n",
       "1                                       2.906389e+07     \n",
       "2                                       2.120793e+07     \n",
       "3                                       4.357390e+07     \n",
       "4                                       5.366987e+07     \n",
       "5                                       3.397976e+07     \n",
       "6                                       3.927521e+07     \n",
       "7                                       3.821715e+07     \n",
       "\n",
       "   ALIMENTOS_ARROZ,_GRANOS_Y_PASTA_ORGANIZACION_ROA_S.A  \\\n",
       "0                                       9.436082e+07      \n",
       "1                                       5.239645e+07      \n",
       "2                                       6.531178e+07      \n",
       "3                                       5.745151e+07      \n",
       "4                                       7.176398e+07      \n",
       "5                                       6.258268e+07      \n",
       "6                                       4.856190e+07      \n",
       "7                                       5.058604e+07      \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_EMPAQUETADOS_EL_TRECE_S.  \\\n",
       "0                                       6.446926e+06                 \n",
       "1                                       6.447547e+06                 \n",
       "2                                       6.450994e+06                 \n",
       "3                                       6.448786e+06                 \n",
       "4                                       6.451371e+06                 \n",
       "5                                       6.456395e+06                 \n",
       "6                                       6.453358e+06                 \n",
       "7                                       6.451125e+06                 \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_MAYAG_EZ_S.A  \\\n",
       "0                                       2.050764e+07     \n",
       "1                                       2.467161e+07     \n",
       "2                                       2.909284e+07     \n",
       "3                                       3.421129e+07     \n",
       "4                                       3.062085e+07     \n",
       "5                                       5.160271e+07     \n",
       "6                                       3.526151e+07     \n",
       "7                                       2.980402e+07     \n",
       "\n",
       "   ALIMENTOS_AZUCAR,_PANELA_Y_ENDULZANTES_PRODUCTORA_Y_COMERCIALIZ  \\\n",
       "0                                       5.473234e+07                 \n",
       "1                                       5.604804e+07                 \n",
       "2                                       1.336809e+08                 \n",
       "3                                       7.677881e+07                 \n",
       "4                                       1.295705e+08                 \n",
       "5                                       2.281834e+08                 \n",
       "6                                       1.914898e+08                 \n",
       "7                                       1.771837e+08                 \n",
       "\n",
       "   ALIMENTOS_CONDIMENTOS,_CALDOS_Y_SAL_REFISAL  ...  CONFITERIA_otros  \\\n",
       "0                                 3.624092e+06  ...      2.249861e+06   \n",
       "1                                 3.493767e+06  ...      2.199768e+06   \n",
       "2                                 3.213300e+06  ...      3.019780e+06   \n",
       "3                                 5.026106e+06  ...      2.158311e+06   \n",
       "4                                 6.584705e+06  ...      2.567258e+06   \n",
       "5                                 4.895406e+06  ...      2.576685e+06   \n",
       "6                                 4.540844e+06  ...      2.156552e+06   \n",
       "7                                 9.492373e+06  ...      2.124881e+06   \n",
       "\n",
       "   DETERGENTE_PARA_ROPA_otros  MASCOTAS_otros  MEDICAMENTOS_otros  \\\n",
       "0                1.401119e+06    1.470064e+06       702036.185214   \n",
       "1                1.401103e+06    1.486898e+06       713482.790975   \n",
       "2                1.401098e+06    1.503899e+06       758700.468021   \n",
       "3                1.401282e+06    1.520679e+06       786145.126463   \n",
       "4                1.401221e+06    1.537563e+06       778281.891934   \n",
       "5                1.401271e+06    1.554436e+06       770942.164074   \n",
       "6                1.401796e+06    1.571358e+06       773554.807145   \n",
       "7                1.401889e+06    1.588148e+06       832079.575631   \n",
       "\n",
       "   MUNDO_BEBES_otros  MUNDO_BEBE_otros  OTRAS_CATEGORIAS_otros         Otros  \\\n",
       "0      333802.766712     315773.044171           625950.995345 -4.045090e+05   \n",
       "1      329354.781902     289163.869116           434097.811101 -5.990003e+05   \n",
       "2      331285.899840     300700.649592           445395.324119 -4.828489e+05   \n",
       "3      333223.177896     312274.425295           365778.273978 -8.867942e+05   \n",
       "4      334038.652464     317140.686945           444158.525047 -1.234418e+06   \n",
       "5      346101.195983     389260.040858           489400.348370 -1.950079e+06   \n",
       "6      335297.918472     324650.371675           532575.167710 -2.211225e+06   \n",
       "7      344117.446532     377376.118774           337777.367428 -2.763986e+06   \n",
       "\n",
       "   SALUD_Y_BIENESTAR_otros  _BEBIDAS_otros  \n",
       "0             1.504037e+07    21779.605272  \n",
       "1             2.942210e+06    21773.808864  \n",
       "2             2.064760e+06    21775.270932  \n",
       "3             2.177413e+06    21775.288515  \n",
       "4             2.067120e+06    21775.306098  \n",
       "5             1.650912e+06    21775.323681  \n",
       "6             2.848066e+06    21773.898933  \n",
       "7             1.393461e+06    21773.918865  \n",
       "\n",
       "[8 rows x 35 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA=predictions\n",
    "data=DATA.reset_index()\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#connect drop table if exists and create it\n",
    "\n",
    "TABLE_NAME = 'vec_output'\n",
    "\n",
    "#credentials=\"postgresql://postgres:12345678@ds4ateam77.cxdzzcrtbiby.us-east-2.rds.amazonaws.com:5432/teate\"\n",
    "connDB = create_engine(f'postgresql://postgres:12345678@ds4ateam77.cxdzzcrtbiby.us-east-2.rds.amazonaws.com:5432/teate')\n",
    "conn = connDB.raw_connection()\n",
    "cursor = conn.cursor()\n",
    "data.head(0).to_sql(TABLE_NAME, connDB, if_exists='replace',index=False)\n",
    "conn.commit()\n",
    "conn.close()\n",
    "\n",
    "#Upload Data in cycles\n",
    "S_=0\n",
    "D_=1000\n",
    "start_time = time.time()\n",
    "print(\"Start at 0 seconds ---\")\n",
    "for n in range(S_,len(data),D_):\n",
    "    S_=n\n",
    "    E_=n+D_\n",
    "    df2=data[(data.index>=S_) & (data.index<E_)]\n",
    "    #connect to db\n",
    "    conn = connDB.raw_connection()\n",
    "    cursor = conn.cursor()\n",
    "    engine=connDB\n",
    "    conn = engine.raw_connection()\n",
    "    cur = conn.cursor()\n",
    "    output = StringIO()\n",
    "    df2.to_csv(output, sep='\\t', header=False, index=False)\n",
    "    output.seek(0)\n",
    "    cur.copy_from(output, TABLE_NAME, null=\"\" , sep='\\t') # null values become ''\n",
    "    conn.commit()\n",
    "    Comp = round((n+D_)/len(data)*100,1)\n",
    "    Records = str(n+D_)\n",
    "    print(Records+\" \"+str(min(Comp,100))+\" pct--- %s seconds\" % round((time.time() - start_time),4))\n",
    "df2=data[(data.index>=E_) & (data.index<=len(data))]\n",
    "print('Done 100%')\n",
    "print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
    "conn.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
